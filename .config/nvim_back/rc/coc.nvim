" coc {{{1
" always show signcolumns
set signcolumn=yes
if !g:is_windows && !has('nvim')
  set tagfunc=CocTagFunc
endif
set shortmess+=c
set updatetime=500

" extensions
let g:coc_global_extensions = [
      \ "coc-calc",
      \ "coc-diagnostic",
      \ "coc-emoji",
      \ "coc-explorer",
      \ "coc-git",
      \ "coc-gitignore",
      \ "coc-json",
      \ "coc-lists",
      \ "coc-markdownlint",
      \ "coc-marketplace",
      \ "coc-nextword",
      \ "coc-prettier",
      \ "coc-project",
      \ "coc-snippets",
      \ "coc-toml",
      \ "coc-translator",
      \ "coc-vimlsp",
      \ "coc-yaml",
      \ "coc-yank",
      \ ]

if g:plugin_use_cocfzf
  call add(g:coc_global_extensions, "coc-fzf-preview")
endif

let g:coc_disable_startup_warning = 1
let g:coc_disable_uncaught_error = 1
let g:coc_channel_timeout = 10

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> for confirm completion, `<c-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<c-y>\<cr>" : "\<c-g>u\<cr>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<cr>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
" au MyAutoCmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
vmap <localleader>f  <Plug>(coc-format-selected)
nmap <localleader>f  <Plug>(coc-format-selected)

" Setup formatexpr specified filetype(s).
au MyAutoCmd FileType typescript,json,markdown,html,css,xml setl formatexpr=CocAction('formatSelected')
" Update signature help on jump placeholder
au MyAutoCmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
vmap <leader>a  <Plug>(coc-codeaction-selected)
" nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use `:Format` for format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` for fold current buffer
command! -nargs=? Fold :call CocAction('fold', <f-args>)

" coc-list {{{1
if g:plugin_use_cocfzf
  nmap <leader>f [fzf-p]
  xmap <leader>f [fzf-p]

  nnoremap <silent> [fzf-p]p     :<C-u>CocCommand fzf-preview.FromResources project_mru git<CR>
  nnoremap <silent> [fzf-p]gs    :<C-u>CocCommand fzf-preview.GitStatus<CR>
  nnoremap <silent> [fzf-p]ga    :<C-u>CocCommand fzf-preview.GitActions<CR>
  nnoremap <silent> [fzf-p]b     :<C-u>CocCommand fzf-preview.Buffers<CR>
  nnoremap <silent> [fzf-p]B     :<C-u>CocCommand fzf-preview.AllBuffers<CR>
  nnoremap <silent> [fzf-p]o     :<C-u>CocCommand fzf-preview.FromResources buffer project_mru<CR>
  nnoremap <silent> [fzf-p]<C-o> :<C-u>CocCommand fzf-preview.Jumps<CR>
  nnoremap <silent> [fzf-p]g;    :<C-u>CocCommand fzf-preview.Changes<CR>
  nnoremap <silent> [fzf-p]/     :<C-u>CocCommand fzf-preview.Lines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'"<CR>
  nnoremap <silent> [fzf-p]*     :<C-u>CocCommand fzf-preview.Lines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'<C-r>=expand('<cword>')<CR>"<CR>
  nnoremap          [fzf-p]gr    :<C-u>CocCommand fzf-preview.ProjectGrep<Space>
  xnoremap          [fzf-p]gr    "sy:CocCommand   fzf-preview.ProjectGrep<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"
  nnoremap <silent> [fzf-p]t     :<C-u>CocCommand fzf-preview.BufferTags<CR>
  nnoremap <silent> [fzf-p]q     :<C-u>CocCommand fzf-preview.QuickFix<CR>
  nnoremap <silent> [fzf-p]l     :<C-u>CocCommand fzf-preview.LocationList<CR>

endif

nnoremap <silent> <leader><leader> :<c-u>CocList<cr>
nnoremap <silent> <leader>cr :<c-u>CocList files --hidden ~/.rhq<cr>
nnoremap <silent> <leader>cf :<c-u>CocList files --hidden ~/.dotfiles<cr>
nnoremap <silent> <leader>cv :<c-u>CocList files --hidden ~/.cache<cr>
nnoremap <silent> <leader>cm :<c-u>CocList files --hidden ~/.memolist<cr>
nnoremap <silent> <leader>cb :<c-u>CocList buffers<cr>
nnoremap <silent> <leader>ch :<c-u>CocList cmdhistory<cr>
nnoremap <silent> <leader>cH :<c-u>CocList helptags<cr>
nnoremap <silent> <leader>cu :<c-u>CocList mru<cr>
nnoremap <silent> <leader>ct :<c-u>CocList todolist<cr>
nnoremap <silent> <leader>cs :<c-u>CocList -I symbols<cr>
nnoremap <silent> <leader>cF :<c-u>CocList filetypes<cr>
nnoremap <silent> <leader>cg :<c-u>CocList grep<cr>
nnoremap <silent> <leader>r :<c-u>CocListResume<cr>

" coc-snippet {{{1
" Use <c-k> for trigger snippet expand.
" imap <c-k> <Plug>(coc-snippets-expand)

" Use <c-j> for select text for visual placeholder of snippet.
vmap <c-j> <Plug>(coc-snippets-select)

" Use <c-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <c-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

" Use <c-k> for both expand and jump (make expand higher priority.)
imap <c-k> <Plug>(coc-snippets-expand-jump)

" coc-bookmark {{{1
" nmap <leader>bj <Plug>(coc-bookmark-next)
" nmap <leader>bk <Plug>(coc-bookmark-prev)
" nmap <leader>bb <Plug>(coc-bookmark-toggle)
" nnoremap <leader>bl :<c-u>CocList bookmark<cr>

" coc-explorer {{{1
if g:plugin_use_coc_explorer
  nnoremap ge :<c-u>CocCommand explorer<cr>
endif

" coc-todolist {{{1
" nnoremap <leader>l :<c-u>CocCommand todolist.create<cr>

" coc-terminal {{{1
" nmap <leader>s <Plug>(coc-terminal-toggle)

" coc-yank {{{1
nnoremap <silent> <space>y :<c-u>CocList -A --normal yank<cr>

" coc-translator {{{1
" popup
nmap <leader>t <Plug>(coc-translator-p)
vmap <leader>t <Plug>(coc-translator-pv)

" vim: fdm=marker expandtab fdc=3 ft=vim ts=2 sw=2 sts=2:

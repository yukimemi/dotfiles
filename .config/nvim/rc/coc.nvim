if !IsInstalled("autoload/coc.vim")
  finish
endif

" coc {{{1
" always show signcolumns
set signcolumn=yes

" extensions
let g:coc_global_extensions = [
      \ "coc-bookmark",
      \ "coc-calc",
      \ "coc-css",
      \ "coc-docker",
      \ "coc-emoji",
      \ "coc-explorer",
      \ "coc-fish",
      \ "coc-git",
      \ "coc-gitignore",
      \ "coc-go",
      \ "coc-highlight",
      \ "coc-html",
      \ "coc-json",
      \ "coc-lists",
      \ "coc-lua",
      \ "coc-pairs",
      \ "coc-powershell",
      \ "coc-prettier",
      \ "coc-pyls",
      \ "coc-python",
      \ "coc-rls",
      \ "coc-rust-analyzer",
      \ "coc-sh",
      \ "coc-snippets",
      \ "coc-solargraph",
      \ "coc-sql",
      \ "coc-syntax",
      \ "coc-tag",
      \ "coc-terminal",
      \ "coc-tsserver",
      \ "coc-utils",
      \ "coc-vetur",
      \ "coc-vimlsp",
      \ "coc-word",
      \ "coc-xml",
      \ "coc-yaml",
      \ "coc-yank",
      \ ]

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` for navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
au MyAutoCmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" Setup formatexpr specified filetype(s).
au MyAutoCmd FileType typescript,json,markdown,html,css,xml setl formatexpr=CocAction('formatSelected')
" Update signature help on jump placeholder
au MyAutoCmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
vmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` for format current buffer
command! -nargs=0 Format :call CocAction('format')
au MyAutoCmd BufWritePre *.js,*.json,*.ts,*.css,*.rs silent call CocAction('format')

" Use `:Fold` for fold current buffer
command! -nargs=? Fold :call CocAction('fold', <f-args>)

" coc-list {{{1
nnoremap <silent> <Space><Space> :<C-u>CocList<CR>
nnoremap <silent> [Space]cg :<C-u>CocList files --hidden ~/.ghq/src<CR>
nnoremap <silent> [Space]r :<C-u>CocListResume<CR>


" coc-snippet {{{1
" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

" Use <C-k> for both expand and jump (make expand higher priority.)
imap <C-k> <Plug>(coc-snippets-expand-jump)

" coc-bookmark {{{1
nmap [Space]bj <Plug>(coc-bookmark-next)
nmap [Space]bk <Plug>(coc-bookmark-prev)
nmap [Space]bb <Plug>(coc-bookmark-toggle)
nnoremap [Space]bl :<C-u>CocList bookmark<CR>

" coc-explorer {{{1
" nnoremap ge :<C-u>CocCommand explorer<CR>

" coc-terminal {{{1
nmap [Space]s <Plug>(coc-terminal-toggle)

" coc-yank {{{1
nnoremap <silent> [Space]y :<C-u>CocList -A --normal yank<cr>

" coc-powershell {{{1
function! s:addHeaderPs1(flg)
  setl fenc=cp932
  setl ff=dos
  let lines = []
  if a:flg == 1
    call add(lines, "@set __SCRIPTPATH=%~f0&@powershell -NoProfile -ExecutionPolicy ByPass -InputFormat None \"$s=[scriptblock]::create((gc \\\"%~f0\\\"|?{$_.readcount -gt 2})-join\\\"`n\\\");&$s\" %*")
  elseif a:flg == 2
    call add(lines, "@set __SCRIPTPATH=%~f0&@powershell -NoProfile -ExecutionPolicy ByPass -InputFormat None \"$s=[scriptblock]::create((gc \\\"%~f0\\\"|?{$_.readcount -gt 2})-join\\\"`n\\\");&$s\" %*&@pause")
  else
    call add(lines, "@set __SCRIPTPATH=%~f0&@powershell -NoProfile -ExecutionPolicy ByPass -InputFormat None \"$s=[scriptblock]::create((gc \\\"%~f0\\\"|?{$_.readcount -gt 2})-join\\\"`n\\\");&$s\" %*&@ping -n 30 localhost>nul")
  endif
  call add(lines, "@exit /b %errorlevel%")
  call extend(lines, readfile(expand("%")))
  let i = 0
  for line in lines
    if len(lines) != (i + 1)
      let lines[i] .= "\r"
    endif
    let i += 1
  endfor
  " let s:basedir = expand("%:p:h") . "/../cmd/"
  let s:basedir = expand("%:p:h") . "/"
  let s:cmdFile = expand("%:p:t:r") . ".cmd"
  call Mkdir(s:basedir)
  call writefile(lines,  s:basedir . s:cmdFile, "b")
  echo "Write " . s:basedir . expand("%:p:t:r") . ".cmd"
endfunction
" au MyAutoCmd BufWritePost *.ps1 call <SID>addHeaderPs1(0)
au MyAutoCmd FileType ps1 nnoremap <buffer> <expr><Leader>b <SID>addHeaderPs1(0)
au MyAutoCmd FileType ps1 nnoremap <buffer> <expr><Leader>m <SID>addHeaderPs1(1)
au MyAutoCmd FileType ps1 nnoremap <buffer> <expr><Leader>p <SID>addHeaderPs1(2)
au MyAutoCmd BufNew,BufRead *.ps1 setl fdm=syntax

" vim: fdm=marker expandtab fdc=3 ft=vim ts=2 sw=2 sts=2:

if !IsInstalled("autoload/coc.vim")
  finish
endif

" coc {{{1
" always show signcolumns
set signcolumn=yes

" extensions
let g:coc_global_extensions = [
      \ "coc-bookmark",
      \ "coc-calc",
      \ "coc-css",
      \ "coc-docker",
      \ "coc-emoji",
      \ "coc-explorer",
      \ "coc-fish",
      \ "coc-git",
      \ "coc-gitignore",
      \ "coc-go",
      \ "coc-highlight",
      \ "coc-html",
      \ "coc-json",
      \ "coc-lists",
      \ "coc-lua",
      \ "coc-powershell",
      \ "coc-prettier",
      \ "coc-pyls",
      \ "coc-python",
      \ "coc-rls",
      \ "coc-rust-analyzer",
      \ "coc-sh",
      \ "coc-snippets",
      \ "coc-solargraph",
      \ "coc-sql",
      \ "coc-syntax",
      \ "coc-tag",
      \ "coc-terminal",
      \ "coc-tsserver",
      \ "coc-utils",
      \ "coc-vetur",
      \ "coc-vimlsp",
      \ "coc-word",
      \ "coc-xml",
      \ "coc-yaml",
      \ "coc-yank",
      \ ]

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> for confirm completion, `<c-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<c-y>" : "\<c-g>u\<cr>"

" Use `[c` and `]c` for navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<cr>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
au MyAutoCmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" Setup formatexpr specified filetype(s).
au MyAutoCmd FileType typescript,json,markdown,html,css,xml setl formatexpr=CocAction('formatSelected')
" Update signature help on jump placeholder
au MyAutoCmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
vmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` for format current buffer
command! -nargs=0 Format :call CocAction('format')
au MyAutoCmd BufWritePre *.js,*.json,*.ts,*.css,*.rs silent call CocAction('format')

" Use `:Fold` for fold current buffer
command! -nargs=? Fold :call CocAction('fold', <f-args>)

" coc-list {{{1
nnoremap <silent> <Space><Space> :<c-u>CocList<cr>
nnoremap <silent> <space>cg :<c-u>CocList files --hidden ~/.ghq/src<cr>
nnoremap <silent> <space>r :<c-u>CocListResume<cr>


" coc-snippet {{{1
" Use <c-l> for trigger snippet expand.
imap <c-l> <Plug>(coc-snippets-expand)

" Use <c-j> for select text for visual placeholder of snippet.
vmap <c-j> <Plug>(coc-snippets-select)

" Use <c-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <c-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

" Use <c-k> for both expand and jump (make expand higher priority.)
imap <c-k> <Plug>(coc-snippets-expand-jump)

" coc-bookmark {{{1
nmap <space>bj <Plug>(coc-bookmark-next)
nmap <space>bk <Plug>(coc-bookmark-prev)
nmap <space>bb <Plug>(coc-bookmark-toggle)
nnoremap <space>bl :<c-u>CocList bookmark<cr>

" coc-explorer {{{1
" nnoremap ge :<c-u>CocCommand explorer<cr>

" coc-terminal {{{1
nmap <space>s <Plug>(coc-terminal-toggle)

" coc-yank {{{1
nnoremap <silent> <space>y :<c-u>CocList -A --normal yank<cr>

" vim: fdm=marker expandtab fdc=3 ft=vim ts=2 sw=2 sts=2:

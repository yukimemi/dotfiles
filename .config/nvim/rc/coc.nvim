if !g:plugin_use_coc
  finish
endif

" coc
" always show signcolumns
set signcolumn=yes
if !g:is_windows && !has('nvim')
  set tagfunc=CocTagFunc
endif
set shortmess+=c
" set updatetime=500

" extensions
let g:coc_global_extensions = [
      \ "coc-diagnostic",
      \ "coc-explorer",
      \ "coc-lists",
      \ "coc-marketplace",
      \ "coc-nextword",
      \ "coc-snippets",
      \ "coc-spell-checker",
      \ "coc-translator",
      \ "coc-vimlsp",
      \ ]

let s:plugin_use_cocfzf = get(g:, "plugin_use_cocfzf", v:false)
if s:plugin_use_cocfzf
  call add(g:coc_global_extensions, "coc-fzf-preview")
endif

let g:coc_disable_startup_warning = 1
let g:coc_disable_uncaught_error = 1
let g:coc_channel_timeout = 10

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
" inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<c-g>u\<cr>\<c-r>=coc#on_enter()\<cr>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<cr>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
au MyAutoCmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
vmap <localleader>f  <Plug>(coc-format-selected)
nmap <localleader>f  <Plug>(coc-format-selected)

" Setup formatexpr specified filetype(s).
au MyAutoCmd FileType typescript,json,markdown,html,css,xml setl formatexpr=CocAction('formatSelected')
" Update signature help on jump placeholder
au MyAutoCmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
vmap <leader>a  <Plug>(coc-codeaction-selected)
" nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format call CocAction('format')

au MyAutoCmd FileType ps1 call <SID>autoformat_onsave()
function! s:autoformat_onsave()
  au MyAutoCmd BufWritePre <buffer> call CocAction('format')
endfunction

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold <cmd>call CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR <cmd>call CocAction('runCommand', 'editor.action.organizeImport')

" Remap <C-f> and <C-b> for scroll float windows/popups.
" if has('nvim-0.4.0') || has('patch-8.2.0750')
"   nnoremap <silent><nowait><expr> <c-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<c-f>"
"   nnoremap <silent><nowait><expr> <c-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<c-b>"
"   inoremap <silent><nowait><expr> <c-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<right>"
"   inoremap <silent><nowait><expr> <c-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<left>"
"   vnoremap <silent><nowait><expr> <c-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<c-f>"
"   vnoremap <silent><nowait><expr> <c-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<c-b>"
" endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <c-s> <Plug>(coc-range-select)
xmap <silent> <c-s> <Plug>(coc-range-select)

" coc-list
if s:plugin_use_cocfzf
  nmap <leader>f [fzf-p]
  xmap <leader>f [fzf-p]

  nmap <silent> [fzf-p]p     :<C-u>CocCommand fzf-preview.FromResources project_mru git<CR>
  nmap <silent> [fzf-p]gs    :<C-u>CocCommand fzf-preview.GitStatus<CR>
  nmap <silent> [fzf-p]ga    :<C-u>CocCommand fzf-preview.GitActions<CR>
  nmap <silent> [fzf-p]b     :<C-u>CocCommand fzf-preview.Buffers<CR>
  nmap <silent> [fzf-p]B     :<C-u>CocCommand fzf-preview.AllBuffers<CR>
  nmap <silent> [fzf-p]o     :<C-u>CocCommand fzf-preview.FromResources buffer project_mru<CR>
  nmap <silent> [fzf-p]<C-o> :<C-u>CocCommand fzf-preview.Jumps<CR>
  nmap <silent> [fzf-p]g;    :<C-u>CocCommand fzf-preview.Changes<CR>
  nmap <silent> [fzf-p]/     :<C-u>CocCommand fzf-preview.Lines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'"<CR>
  nmap <silent> [fzf-p]*     :<C-u>CocCommand fzf-preview.Lines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'<C-r>=expand('<cword>')<CR>"<CR>
  nmap          [fzf-p]gr    :<C-u>CocCommand fzf-preview.ProjectGrep<Space>
  nmap          [fzf-p]gr    "sy:CocCommand   fzf-preview.ProjectGrep<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"
  nmap <silent> [fzf-p]t     :<C-u>CocCommand fzf-preview.BufferTags<CR>
  nmap <silent> [fzf-p]q     :<C-u>CocCommand fzf-preview.QuickFix<CR>
  nmap <silent> [fzf-p]l     :<C-u>CocCommand fzf-preview.LocationList<CR>
endif

if g:plugin_use_coclist
  nnoremap <silent> <leader>cc :<c-u>CocList<cr>
  nnoremap <silent> <leader>cD :<c-u>CocList files --hidden ~/.dotfiles<cr>
  nnoremap <silent> <leader>cv :<c-u>CocList files --hidden ~/.cache<cr>
  nnoremap <silent> <leader>cm :<c-u>CocList files --hidden ~/.memolist<cr>
  nnoremap <silent> <leader>cs :<c-u>CocList files --hidden ~/src<cr>
  nnoremap <silent> <leader>cb :<c-u>CocList buffers<cr>
  nnoremap <silent> <leader>ch :<c-u>CocList cmdhistory<cr>
  nnoremap <silent> <leader>cH :<c-u>CocList helptags<cr>
  nnoremap <silent> <leader>cu :<c-u>CocList mru<cr>
  nnoremap <silent> <leader>ct :<c-u>CocList todolist<cr>
  nnoremap <silent> <leader>cS :<c-u>CocList -I symbols<cr>
  nnoremap <silent> <leader>cF :<c-u>CocList filetypes<cr>
  nnoremap <silent> <leader>cg :<c-u>CocList --no-quit grep<cr>
  nnoremap <silent> <leader>cr :<c-u>CocListResume<cr>
endif

" coc-snippet
" Use <c-k> for trigger snippet expand.
" imap <c-k> <Plug>(coc-snippets-expand)

" Use <c-j> for select text for visual placeholder of snippet.
" vmap <c-j> <Plug>(coc-snippets-select)

" Use <c-j> for both expand and jump (make expand higher priority.)
imap <c-j> <Plug>(coc-snippets-expand-jump)

" Use <leader>x for convert visual selected code to snippet
xmap <leader>x  <Plug>(coc-convert-snippet)

" Make `<tab>` used for trigger completion, completion confirm, snippet expand and jump like VSCode.
inoremap <silent><expr> <tab>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<cr>" :
      \ <SID>check_back_space() ? "\<tab>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'
let g:coc_snippet_prev = '<s-tab>'


" coc-explorer
let s:plugin_use_coc_explorer = get(g:, "plugin_use_coc_explorer", v:false)
if s:plugin_use_coc_explorer
  nnoremap ge :<c-u>CocCommand explorer<cr>
endif

" coc-todolist
" nnoremap <leader>l :<c-u>CocCommand todolist.create<cr>

" coc-terminal
" nmap <leader>s <Plug>(coc-terminal-toggle)

" coc-yank
nnoremap <silent> <space>y :<c-u>CocList -A --normal yank<cr>

" coc-translator
" popup
nmap <leader>T <Plug>(coc-translator-p)
vmap <leader>T <Plug>(coc-translator-pv)

" coc-go
au MyAutoCmd BufWritePre *.go :silent call CocAction('runCommand', 'editor.action.organizeImport')

" vim: fdm=marker expandtab fdc=3 ft=vim ts=2 sw=2 sts=2:

if !g:plugin_use_coc
  finish
endif

" coc
" always show signcolumns
set signcolumn=yes
if !g:is_windows && !has('nvim')
  set tagfunc=CocTagFunc
endif
set shortmess+=c
" set updatetime=500

" extensions
let g:coc_global_extensions = [
      \ "coc-diagnostic",
      \ "coc-explorer",
      \ "coc-pairs",
      \ "coc-lists",
      \ "coc-marketplace",
      \ "coc-snippets",
      \ "coc-spell-checker",
      \ "coc-translator",
      \ "coc-rust-analyzer",
      \ "coc-vimlsp",
      \ ]

let s:plugin_use_cocfzf = get(g:, "plugin_use_cocfzf", v:false)
if s:plugin_use_cocfzf
  call add(g:coc_global_extensions, "coc-fzf-preview")
endif

let g:coc_disable_startup_warning = 1
let g:coc_disable_uncaught_error = 1
let g:coc_channel_timeout = 10

" Use <c-space> for trigger completion.
Keymap i <silent><expr> <c-space> coc#refresh()

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
Keymap n <silent> [g <Plug>(coc-diagnostic-prev)
Keymap n <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
Keymap n <silent> gd <Plug>(coc-definition)
Keymap n <silent> gy <Plug>(coc-type-definition)
Keymap n <silent> gi <Plug>(coc-implementation)
Keymap n <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
Keymap n <silent> K <cmd>call ShowDocumentation()<cr>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
au MyAutoCmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
Keymap n <leader>rn <Plug>(coc-rename)

" Formatting selected code.
Keymap nx <leader>f <Plug>(coc-format-selected)

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
Keymap nx <leader>a <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
Keymap n <leader>ac <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
Keymap n <leader>qf <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
Keymap n <leader>cl <Plug>(coc-codelens-action)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
Keymap nx <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" coc-list
if s:plugin_use_cocfzf
  nmap <leader>f [fzf-p]
  xmap <leader>f [fzf-p]

  nmap <silent> [fzf-p]p     :<C-u>CocCommand fzf-preview.FromResources project_mru git<CR>
  nmap <silent> [fzf-p]gs    :<C-u>CocCommand fzf-preview.GitStatus<CR>
  nmap <silent> [fzf-p]ga    :<C-u>CocCommand fzf-preview.GitActions<CR>
  nmap <silent> [fzf-p]b     :<C-u>CocCommand fzf-preview.Buffers<CR>
  nmap <silent> [fzf-p]B     :<C-u>CocCommand fzf-preview.AllBuffers<CR>
  nmap <silent> [fzf-p]o     :<C-u>CocCommand fzf-preview.FromResources buffer project_mru<CR>
  nmap <silent> [fzf-p]<C-o> :<C-u>CocCommand fzf-preview.Jumps<CR>
  nmap <silent> [fzf-p]g;    :<C-u>CocCommand fzf-preview.Changes<CR>
  nmap <silent> [fzf-p]/     :<C-u>CocCommand fzf-preview.Lines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'"<CR>
  nmap <silent> [fzf-p]*     :<C-u>CocCommand fzf-preview.Lines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'<C-r>=expand('<cword>')<CR>"<CR>
  nmap          [fzf-p]gr    :<C-u>CocCommand fzf-preview.ProjectGrep<Space>
  nmap          [fzf-p]gr    "sy:CocCommand   fzf-preview.ProjectGrep<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"
  nmap <silent> [fzf-p]t     :<C-u>CocCommand fzf-preview.BufferTags<CR>
  nmap <silent> [fzf-p]q     :<C-u>CocCommand fzf-preview.QuickFix<CR>
  nmap <silent> [fzf-p]l     :<C-u>CocCommand fzf-preview.LocationList<CR>
endif

if g:plugin_use_coclist
  nnoremap <silent> <leader>cc :<c-u>CocList<cr>
  nnoremap <silent> <leader>cD :<c-u>CocList files --hidden ~/.dotfiles<cr>
  nnoremap <silent> <leader>cv :<c-u>CocList files --hidden ~/.cache<cr>
  nnoremap <silent> <leader>cm :<c-u>CocList files --hidden ~/.memolist<cr>
  nnoremap <silent> <leader>cs :<c-u>CocList files --hidden ~/src<cr>
  nnoremap <silent> <leader>cb :<c-u>CocList buffers<cr>
  nnoremap <silent> <leader>ch :<c-u>CocList cmdhistory<cr>
  nnoremap <silent> <leader>cH :<c-u>CocList helptags<cr>
  nnoremap <silent> <leader>cu :<c-u>CocList mru<cr>
  nnoremap <silent> <leader>ct :<c-u>CocList todolist<cr>
  nnoremap <silent> <leader>cS :<c-u>CocList -I symbols<cr>
  nnoremap <silent> <leader>cF :<c-u>CocList filetypes<cr>
  nnoremap <silent> <leader>cg :<c-u>CocList --no-quit grep<cr>
  nnoremap <silent> <leader>cr :<c-u>CocListResume<cr>
endif

" coc-snippet
" Use <C-l> for trigger snippet expand.
" Keymap i <C-k> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
" Keymap v <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

" Use <C-k> for both expand and jump (make expand higher priority.)
Keymap i <c-k> <Plug>(coc-snippets-expand-jump)

" Use <leader>x for convert visual selected code to snippet
Keymap x <localleader>x  <Plug>(coc-convert-snippet)


" coc-explorer
let s:plugin_use_coc_explorer = get(g:, "plugin_use_coc_explorer", v:false)
if s:plugin_use_coc_explorer
  nnoremap ge :<c-u>CocCommand explorer<cr>
endif

" coc-todolist
" nnoremap <leader>l :<c-u>CocCommand todolist.create<cr>

" coc-terminal
" nmap <leader>s <Plug>(coc-terminal-toggle)

" coc-yank
Keymap n <silent> <space>y :<c-u>CocList -A --normal yank<cr>

" coc-translator
" popup
Keymap n <leader>T <Plug>(coc-translator-p)
Keymap v <leader>T <Plug>(coc-translator-pv)

" coc-go
au MyAutoCmd BufWritePre *.go :silent call CocAction('runCommand', 'editor.action.organizeImport')

" vim: fdm=marker expandtab fdc=3 ft=vim ts=2 sw=2 sts=2:

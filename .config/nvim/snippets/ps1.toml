[header]
prefix = ["header"]
body = """
<#
  .SYNOPSIS
    ${TM_FILENAME}
  .DESCRIPTION

  .INPUTS
    - cfg: json config.
  .OUTPUTS
    - 0: SUCCESS / 1: ERROR
  .Last Change : 2024/09/15 01:16:03.
#>
param([string]\\$cfg)

\\$ErrorActionPreference = "Stop"
\\$DebugPreference = "SilentlyContinue" # Continue SilentlyContinue Stop Inquire
# Enable-RunspaceDebug -BreakAll

<#
  .SYNOPSIS
    log
  .DESCRIPTION
    log message
  .INPUTS
    - msg
    - color
  .OUTPUTS
    - None
#>
function log {

  [CmdletBinding()]
  [OutputType([void])]
  param([string]\\$msg, [string]\\$color)
  trap {
    Write-Host "[log] Error \\$_" "Red"; throw \\$_
  }

  \\$now = Get-Date -f "yyyy/MM/dd HH:mm:ss.fff"
  if (\\$color) {
    Write-Host -ForegroundColor \\$color "\\${now} \\${msg}"
  } else {
    Write-Host "\\${now} \\${msg}"
  }
}

<#
  .SYNOPSIS
    Init
  .DESCRIPTION
    Init
  .INPUTS
    - None
  .OUTPUTS
    - None
#>
function Start-Init {

  [CmdletBinding()]
  [OutputType([void])]
  param()
  trap {
    log "[Start-Init] Error \\$_" "Red"; throw \\$_
  }

  log "[Start-Init] Start"

  \\$script:app = @{}

  \\$cmdFullPath = & {
    if (\\$env:__SCRIPTPATH) {
      return [System.IO.Path]::GetFullPath(\\$env:__SCRIPTPATH)
    } else {
      return [System.IO.Path]::GetFullPath(\\$script:MyInvocation.MyCommand.Path)
    }
  }
  \\$app.Add("cmdFile", \\$cmdFullPath)
  \\$app.Add("cmdDir", [System.IO.Path]::GetDirectoryName(\\$app.cmdFile))
  \\$app.Add("cmdName", [System.IO.Path]::GetFileNameWithoutExtension(\\$app.cmdFile))
  \\$app.Add("cmdFileName", [System.IO.Path]::GetFileName(\\$app.cmdFile))

  \\$app.Add("pwd", [System.IO.Path]::GetFullPath((Get-Location).Path))

  # log
  \\$app.Add("now", (Get-Date -Format "yyyyMMddTHHmmssfffffff"))
  \\$app.Add("logDir", [System.IO.Path]::Combine(\\$app.cmdDir, "logs"))
  \\$app.Add("logFile", [System.IO.Path]::Combine(\\$app.logDir, "\\$(\\$app.cmdName)_\\$(\\$app.now).log"))
  \\$app.Add("logName", [System.IO.Path]::GetFileNameWithoutExtension(\\$app.logFile))
  \\$app.Add("logFileName", [System.IO.Path]::GetFileName(\\$app.logFile))
  New-Item -Force -ItemType Directory \\$app.logDir | Out-Null
  Start-Transcript \\$app.logFile

  # const value.
  \\$app.Add("cnst", @{
      SUCCESS = 0
      ERROR   = 1
    })

  # config.
  if ([string]::IsNullOrEmpty(\\$cfg)) {
    \\$app.Add("cfgPath", [System.IO.Path]::Combine(\\$app.cmdDir, "\\$(\\$app.cmdName).json"))
  } else {
    \\$app.Add("cfgPath", \\$cfg)
  }
  if (!(Test-Path \\$app.cfgPath)) {
    log "\\$(\\$app.cfgPath) is not found ! finish ..."
    \\$app.result = \\$app.cnst.ERROR
    exit \\$app.result
  }
  \\$json = Get-Content -Encoding utf8 \\$app.cfgPath | ConvertFrom-Json
  \\$app.Add("cfg", \\$json)

  # Init result
  \\$app.Add("result", \\$app.cnst.ERROR)

  log "[Start-Init] End"
}

<#
  .SYNOPSIS
    Main
  .DESCRIPTION
    Execute main
  .INPUTS
    - None
  .OUTPUTS
    - Result - 0 (SUCCESS), 1 (ERROR)
#>
function Start-Main {
  [CmdletBinding()]
  [OutputType([int])]
  param()

  try {
    Start-Init
    log "[Start-Main] Start"

    \\$app.result = \\$app.cnst.SUCCESS
  } catch {
    log "Error ! \\$_" "Red"
    \\$app.result = \\$app.cnst.ERROR
  } finally {
    log "[Start-Main] End"
    Stop-Transcript
  }
}

# Call main.
Start-Main
exit \\$app.result
"""

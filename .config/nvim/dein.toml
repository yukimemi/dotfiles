# =============================================================================
# File        : dein.toml
# Author      : yukimemi
# Last Change : 2018/10/20 23:30:06.
# =============================================================================

# ==================== Dein ====================== {{{1
[[plugins]]
repo = 'Shougo/dein.vim' # {{{2

# ==================== Visual ==================== {{{1
[[plugins]]
repo = 'rhysd/vim-color-spring-night' # {{{2

[[plugins]]
repo = 'ryanoasis/vim-devicons' # {{{2

[[plugins]]
repo = 'itchyny/lightline.vim' # {{{2
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'material',
      \ 'mode_map': {
      \   'n' : 'N',
      \   'i' : 'I',
      \   'R' : 'R',
      \   'v' : 'V',
      \   'V' : 'V-L',
      \   'c' : 'C',
      \   "\<C-v>": 'V-B',
      \   's' : 'S',
      \   'S' : 'S-L',
      \   "\<C-s>": 'S-B'
      \   },
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'filename', 'anzu' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'gitbranch#name',
      \   'readonly': 'LightLineReadonly',
      \   'modified': 'LightLineModified',
      \   'filename': 'LightLineFilename',
      \   'filetype': 'LightLineFiletype',
      \   'fileformat': 'LightLineFileformat',
      \   'anzu': 'anzu#search_status',
      \ },
      \ }

function! LightLineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightLineReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return ""
  else
    return ""
  endif
endfunction

function! LightLineFugitive()
  if exists("*fugitive#head")
    let _ = fugitive#head()
    return strlen(_) ? ''._ : ''
  endif
  return ''
endfunction

function! LightLineFilename()
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction
'''

[[plugins]]
repo = 'Yggdroot/indentLine' # {{{2
hook_add = '''
let g:indentLine_faster = 1
let g:indentLine_fileTypeExclude = ['help', 'nerdtree', 'calendar', 'thumbnail', 'denite', 'vimfiler', 'tweetvim']
nnoremap <silent><Leader>i :<C-u>IndentLinesToggle<CR>
'''

[[plugins]]
repo = 'itchyny/vim-highlighturl' # {{{2

[[plugins]]
repo = 'vim-scripts/matchit.zip' # {{{2

[[plugins]]
repo = 'ntpeters/vim-better-whitespace' # {{{2

# ==================== Complement ================ {{{1
[[plugins]]
repo = 'Shougo/neosnippet.vim' # {{{2
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_i = 1
on_ft = 'snippet'
hook_add = '''
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory = $VIM_PATH . '/snippets'

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets' # {{{2
lazy = 1

[[plugins]]
repo = 'Shougo/context_filetype.vim' # {{{2
lazy = 1

[[plugins]]
repo = 'prabirshrestha/vim-lsp' # {{{2

[[plugins]]
repo = 'prabirshrestha/async.vim' # {{{2

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim' # {{{2
hook_add = '''
let g:asyncomplete_auto_popup = 1
let g:asyncomplete_remove_duplicates = 1
let g:asyncomplete_force_refresh_on_context_changed = 1
imap <C-Space> <Plug>(asyncomplete_force_refresh)
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim' # {{{2
hook_add = '''
" Docker. {{{3
if executable('docker-langserver')
  au MyAutoCmd User lsp_setup call lsp#register_server({
        \ 'name': 'docker-langserver',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'docker-langserver --stdio']},
        \ 'priority': 4,
        \ 'whitelist': ['dockerfile'],
        \ })
endif

" go. {{{3
if executable('go-langserver')
  au MyAutoCmd User lsp_setup call lsp#register_server({
        \ 'name': 'go-langserver',
        \ 'cmd': {server_info->['go-langserver', '-mode', 'stdio']},
        \ 'priority': 4,
        \ 'whitelist': ['go'],
        \ })
endif

" python. {{{3
if executable('pyls')
  au MyAutoCmd User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'priority': 4,
        \ 'whitelist': ['python'],
        \ })
endif

" rust. {{{3
if executable('rls')
  au MyAutoCmd User lsp_setup call lsp#register_server({
        \ 'name': 'rls',
        \ 'cmd': {server_info->['rustup', 'run', 'nightly', 'rls']},
        \ 'priority': 4,
        \ 'whitelist': ['rust'],
        \ })
endif

" typescript. {{{3
if executable('typescript-language-server')
  au MyAutoCmd User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': { server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'root_uri': { server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_directory(lsp#utils#get_buffer_path(), '.git/..'))},
        \ 'priority': 4,
        \ 'whitelist': ['typescript', 'javascript', 'javascript.jsx']
        \ })
endif
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-buffer.vim' # {{{2
hook_add = '''
au MyAutoCmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
      \ 'name': 'buffer',
      \ 'whitelist': ['*'],
      \ 'priority': 1,
      \ 'completor': function('asyncomplete#sources#buffer#completor'),
      \ }))
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-file.vim' # {{{2
hook_add = '''
au MyAutoCmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
      \ 'name': 'file',
      \ 'whitelist': ['*'],
      \ 'priority': 1,
      \ 'completor': function('asyncomplete#sources#file#completor'),
      \ }))
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-emoji.vim' # {{{2
hook_add = '''
au MyAutoCmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#emoji#get_source_options({
      \ 'name': 'emoji',
      \ 'whitelist': ['*'],
      \ 'priority': 1,
      \ 'completor': function('asyncomplete#sources#emoji#completor'),
      \ }))
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-tags.vim' # {{{2
if = "executable('ctags')"
hook_add = '''
au MyAutoCmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#tags#get_source_options({
      \ 'name': 'tags',
      \ 'whitelist': ['*'],
      \ 'priority': 2,
      \ 'completor': function('asyncomplete#sources#tags#completor'),
      \ 'config': {
      \    'max_file_size': 20000000,
      \ }
      \ }))
'''

[[plugins]]
repo = 'yami-beta/asyncomplete-omni.vim' # {{{2
hook_add = '''
au MyAutoCmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
      \ 'name': 'omni',
      \ 'whitelist': ['*'],
      \ 'blacklist': ['go', 'rust'],
      \ 'priority': 3,
      \ 'completor': function('asyncomplete#sources#omni#completor')
      \ }))
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-neosnippet.vim' # {{{2
depends = ['neosnippet.vim']
hook_add = '''
au MyAutoCmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
      \ 'name': 'neosnippet',
      \ 'whitelist': ['*'],
      \ 'priority': 3,
      \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
      \ }))
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-necovim.vim' # {{{2
on_ft = 'vim'
hook_source = '''
call asyncomplete#register_source(asyncomplete#sources#necovim#get_source_options({
      \ 'name': 'necovim',
      \ 'whitelist': ['vim'],
      \ 'priority': 4,
      \ 'completor': function('asyncomplete#sources#necovim#completor'),
      \ }))
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-necosyntax.vim' # {{{2
on_ft = 'vim'
hook_source = '''
call asyncomplete#register_source(asyncomplete#sources#necosyntax#get_source_options({
      \ 'name': 'necosyntax',
      \ 'whitelist': ['*'],
      \ 'priority': 4,
      \ 'completor': function('asyncomplete#sources#necosyntax#completor'),
      \ }))
'''

[[plugins]]
repo = 'keremc/asyncomplete-racer.vim' # {{{2
on_ft = 'rust'
if = "!executable('rls') && executable('racer')"
hook_source = '''
call asyncomplete#register_source(asyncomplete#sources#racer#get_source_options({
      \ 'name': 'racer',
      \ 'priority': 4,
      \ 'whitelist': ['rust'],
      \ }))
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-gocode.vim' # {{{2
on_ft = 'go'
if = "!executable('go-langserver') && executable('gocode')"
hook_source = '''
call asyncomplete#register_source(asyncomplete#sources#gocode#get_source_options({
      \ 'name': 'gocode',
      \ 'whitelist': ['go'],
      \ 'priority': 4,
      \ 'completor': function('asyncomplete#sources#gocode#completor'),
      \ }))
'''

# ==================== Utility =================== {{{1
[[plugins]]
repo = 'airblade/vim-rooter' # {{{2
hook_add = '''
let g:rooter_use_lcd = 1
let g:rooter_silent_chdir = 1
let g:rooter_manual_only = 1
'''

[[plugins]]
repo = 'thinca/vim-submode' # {{{2
hook_add = '''
let g:submode_leave_with_key = 1
au MyAutoCmd VimEnter * call <SID>vim_submode_aft()
function! s:vim_submode_aft() abort
  call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
  call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
  call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
  call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
  call submode#map('bufmove', 'n', '', '>', '<C-w>>')
  call submode#map('bufmove', 'n', '', '<', '<C-w><')
  call submode#map('bufmove', 'n', '', '+', '<C-w>+')
  call submode#map('bufmove', 'n', '', '-', '<C-w>-')
endfunction
'''

[[plugins]]
repo = 'Konfekt/FastFold' # {{{2
on_path = '.*'
hokk_add = '''
let g:fastfold_savehook = 0
'''

# [[plugins]]
# repo = 'arecarn/vim-fold-cycle'

[[plugins]]
repo = 'Shougo/vimproc.vim' # {{{2
if = "!has('kaoriya')"
build = 'make'

[[plugins]]
repo = 'junegunn/vim-easy-align' # {{{2
on_map = '<Plug>(EasyAlign)'
hook_add = '''
vmap <Enter> <Plug>(EasyAlign)

let g:easy_align_delimiters = {
      \ '>': {
      \       'pattern': '>>\|=>\|>.\+',
      \       'right_margin': 0,
      \       'delimiter_align': 'l'
      \   },
      \ '/': {
      \       'pattern': '//\+\|/\*\|\*/',
      \       'delimiter_align': 'l',
      \       'ignore_groups': ['!Comment']
      \   },
      \ ']': {
      \       'pattern': '[[\]]',
      \       'left_margin': 0,
      \       'right_margin': 0,
      \       'stick_to_left': 0
      \   },
      \ ')': {
      \       'pattern': '[()]',
      \       'left_margin': 0,
      \       'right_margin': 0,
      \       'stick_to_left': 0
      \   },
      \ 'd': {
      \       'pattern': ' \(\S\+\s*[;=]\)\@=',
      \       'left_margin': 0,
      \       'right_margin': 0
      \   },
      \ 'p': {
      \       'pattern': 'pos=\|size=',
      \       'right_margin': 0
      \   },
      \ 's': {
      \       'pattern': 'sys=\|Trns=',
      \       'right_margin': 0
      \   },
      \ 'k': {
      \       'pattern': 'key=\|cmt=',
      \       'right_margin': 0
      \   },
      \ 'c': {
      \       'pattern': 'cmt=',
      \       'right_margin': 0
      \   },
      \ ':': {
      \       'pattern': ':',
      \       'left_margin': 1,
      \       'right_margin': 1,
      \       'stick_to_left': 0,
      \       'ignore_groups': []
      \   },
      \ 't': {
      \       'pattern': "\<tab>",
      \       'left_margin': 0,
      \       'right_margin': 0
      \   },
      \ ';': {
      \       'pattern': ';',
      \       'left_margin': 1,
      \       'right_margin': 1,
      \       'stick_to_left': 0,
      \       'ignore_groups': []
      \   }
      \ }
'''

[[plugins]]
repo = 'glidenote/memolist.vim' # {{{2
on_cmd = ['Memolist', 'MemoNew', 'MemoGrep']
hook_add = '''
if isdirectory($HOME . '/Dropbox')
  let g:memolist_path = $HOME . '/Dropbox/memolist'
else
  let g:memolist_path = $HOME . '/.memolist'
endif

call Mkdir(g:memolist_path)

let g:memolist_denite = 1
let g:memolist_memo_suffix = "md"
let g:memolist_prompt_tags = 1

" mappings
nnoremap <Leader>mn :<C-u>MemoNew<CR>
" nnoremap <Leader>ml :<C-u>MemoList<CR>
nnoremap <Leader>ml :<C-u>exe printf("Dirvish %s", g:memolist_path)<CR>
nnoremap <Leader>mg :<C-u>MemoGrep<CR>
'''

[[plugins]]
repo = 'vim-scripts/autodate.vim' # {{{2
hook_add = '''
let g:autodate_format = "%Y/%m/%d %H:%M:%S"
let g:autodate_keyword_pre  = "Last Change *:"
let g:autodate_keyword_post = "."
'''

[[plugins]]
repo = 'simnalamburt/vim-mundo' # {{{2
on_cmd = 'MundoToggle'
hook_add = '''
nnoremap [Space]u :MundoToggle<CR>
'''

[[plugins]]
repo = 'tpope/vim-repeat' # {{{2

[[plugins]]
repo = 'w0rp/ale' # {{{2
hook_add = '''
let g:ale_linters = {
      \ 'go': ['golint', 'go vet', 'goimports'],
      \ 'haskell': ['hlint']
      \ }
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_save = 1
nmap <silent> z[ <Plug>(ale_previous_wrap)
nmap <silent> z] <Plug>(ale_next_wrap)

let g:ale_fix_on_save = 1
let g:ale_fixers = {
      \ 'javascript': ['prettier'],
      \ 'javascript.jsx': ['prettier'],
      \ 'typescript': ['prettier'],
      \ 'json': ['prettier'],
      \ 'markdown': ['prettier'],
      \ 'scss': ['prettier'],
      \ 'typescript.tsx': ['prettier'],
      \ 'sh': ['shfmt'],
      \ 'elm': ['elm-format'],
      \ }

" Rust.
let g:ale_rust_ignore_error_codes = ['E0432', 'E0433']
'''


[[plugins]]
repo = 'tyru/capture.vim' # {{{2
on_cmd = ['Capture']

[[plugins]]
repo = 'justinmk/vim-dirvish' # {{{2
on_cmd = ['Dirvish']
hook_add = '''
" Don't use netrw.
let g:loaded_netrwPlugin = 1
if g:is_windows || !has('python3')
  nnoremap [Space]v :<C-u>Dirvish %<CR>
endif
'''

[[plugins]]
repo = 'Shougo/echodoc.vim' # {{{2
depends = ['context_filetype.vim']
on_i = 1
hook_add = '''
let g:echodoc_enable_at_startup = 1
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim' # {{{2
on_cmd = 'CtrlP'
hook_add = '''
let g:ctrlp_map = '<nop>'
let g:ctrlp_use_caching = 1
let g:ctrlp_show_hidden = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_lazy_update = 1
let g:ctrlp_extensions = ['line', 'changes', 'mixed', 'bookmarkdir', 'memolist']
nnoremap scp :<C-u>CtrlP<CR>
nnoremap scb :<C-u>CtrlPBuffer<CR>
nnoremap scd :<C-u>CtrlPCurWD<CR>
nnoremap scu :<C-u>CtrlPMRU<CR>
nnoremap scm :<C-u>CtrlPMark<CR>
" nnoremap scl :<C-u>CtrlPLine<CR>
nnoremap scg :<C-u>CtrlPChange<CR>
nnoremap scc :<C-u>CtrlPMixed<CR>
nnoremap scf :<C-u>CtrlPFiletype<CR>
" nnoremap scl :<C-u>CtrlPLauncher<CR>
nnoremap sct :<C-u>CtrlPSonictemplate<CR>
nnoremap sch :<C-u>CtrlPCmdHistory<CR>

nnoremap scl :<C-u>CtrlPMemolist<CR>

if executable('rg')
  let g:ctrlp_user_command ='rg -F --files %s'
endif
'''

[[plugins]]
repo = 'kaneshin/ctrlp-filetype' # {{{2
on_source = 'ctrlp.vim'
[[plugins]]
repo = 'kaneshin/ctrlp-memolist' # {{{2
on_source = 'ctrlp.vim'
[[plugins]]
repo = 'mattn/ctrlp-launcher' # {{{2
on_source = 'ctrlp.vim'
[[plugins]]
repo = 'mattn/ctrlp-mark' # {{{2
on_source = 'ctrlp.vim'
[[plugins]]
repo = 'ompugao/ctrlp-history' # {{{2
on_source = 'ctrlp.vim'

[[plugins]]
repo = 'dhruvasagar/vim-table-mode' # {{{2
on_ft = 'markdown'

[[plugins]]
repo = 'kopischke/vim-stay' # {{{2

[[plugins]]
repo = 'qpkorr/vim-renamer' # {{{2
on_cmd = 'Renamer'
hook_add = '''
nnoremap <Leader>r :<C-u>Renamer<CR>
'''

[[plugins]]
repo = 'itchyny/vim-external' # {{{2
on_map = '<Plug>'
hook_add = '''
map <Leader>e <Plug>(external-editor)
map <Leader>n <Plug>(external-explorer)
map <Leader>b <Plug>(external-browser)
'''

[[plugins]]
repo = 'Shougo/defx.nvim' # {{{2
on_cmd = ['Defx']
if = '!g:is_windows && has("python3")'
hook_add = '''
if !g:is_windows
  nnoremap [Space]v :<C-u>Defx `expand('%:p:h')` -search=`expand('%:p')`<CR>
endif
au MyAutoCmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
  nnoremap <silent><buffer><expr> l defx#do_action('open')
  nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N defx#do_action('new_file')
  nnoremap <silent><buffer><expr> d defx#do_action('remove')
  nnoremap <silent><buffer><expr> r defx#do_action('rename')
  nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
endfunction
'''

[[plugins]]
repo = 'tmux-plugins/vim-tmux-focus-events' # {{{2
if  = '!g:is_windows'

[[plugins]]
repo = 'roxma/vim-tmux-clipboard' # {{{2
if  = '!g:is_windows'

[[plugins]]
repo = 'roxma/nvim-yarp' # {{{2
if = '!has("nvim")'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc' # {{{2
if = '!has("nvim")'

# ==================== Search ==================== {{{1
[[plugins]]
repo = 'haya14busa/vim-asterisk' # {{{2
on_map = '<Plug>'

[[plugins]]
repo = 'osyo-manga/vim-anzu' # {{{2
on_map = '<Plug>'

[[plugins]]
repo = 'haya14busa/is.vim' # {{{2
depends = ['vim-asterisk', 'vim-anzu']
on_map = '<Plug>'
hook_add = '''
map n <Plug>(is-nohl)<Plug>(anzu-n-with-echo)zv
map N <Plug>(is-nohl)<Plug>(anzu-N-with-echo)zv

map *  <Plug>(asterisk-z*)<Plug>(is-nohl-1)zv
map g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1)zv
map #  <Plug>(asterisk-z#)<Plug>(is-nohl-1)zv
map g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1)zv
'''

[[plugins]]
repo = 't9md/vim-quickhl' # {{{2
hook_add = '''
let g:quickhl_manual_enable_at_startup = 1

nmap [Space]m <Plug>(quickhl-manual-this)
xmap [Space]m <Plug>(quickhl-manual-this)
nmap [Space]M <Plug>(quickhl-manual-reset)
xmap [Space]M <Plug>(quickhl-manual-reset)

let g:quickhl_manual_keywords = [
      \ "失敗",
      \ "警告",
      \ "エラー",
      \ "異常",
      \ "warn",
      \ "WARN",
      \ "error",
      \ "ERROR",
      \ ]
'''

[[plugins]]
repo = 'itchyny/vim-parenmatch' # {{{2
hook_add = 'let g:loaded_matchparen = 1'

[[plugins]]
repo = 'itchyny/vim-cursorword' # {{{2
hook_add = '''
function! s:ToggleCursorWord() abort
  let b:cursorword = !get(b:, 'cursorword', 1)
endfunction

com! ToggleCursorWord call s:ToggleCursorWord()
'''

[[plugins]]
repo = 'thinca/vim-qfreplace' # {{{2
on_ft = ['quickfix']


# ==================== Operators ================= {{{1
[[plugins]]
repo = 'kana/vim-operator-user' # {{{2
on_map = '<Plug>'

[[plugins]]
repo = 'kana/vim-operator-replace' # {{{2
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = 'map _ <Plug>(operator-replace)'

[[plugins]]
repo = 'rhysd/vim-operator-surround' # {{{2
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = '''
map sA <Plug>(operator-surround-append)
map sD <Plug>(operator-surround-delete)
map sR <Plug>(operator-surround-replace)
'''

[[plugins]]
repo = 'osyo-manga/vim-operator-search' # {{{2
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = 'nmap [Space]/ <Plug>(operator-search)'

[[plugins]]
repo = 'haya14busa/vim-operator-flashy' # {{{2
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = '''
map y <Plug>(operator-flashy)
nmap Y <Plug>(operator-flashy)$
'''



# ==================== Textobjs ================== {{{1
[[plugins]]
repo = 'kana/vim-textobj-user' # {{{2
on_map = '<Plug>'


[[plugins]]
repo = 'kana/vim-textobj-entire' # {{{2
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap ae <Plug>(textobj-entire-a)
xmap ae <Plug>(textobj-entire-a)
omap ie <Plug>(textobj-entire-i)
xmap ie <Plug>(textobj-entire-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-fold' # {{{2
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap az <Plug>(textobj-fold-a)
xmap az <Plug>(textobj-fold-a)
omap iz <Plug>(textobj-fold-i)
xmap iz <Plug>(textobj-fold-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-function' # {{{2
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap af <Plug>(textobj-function-a)
xmap af <Plug>(textobj-function-a)
omap if <Plug>(textobj-function-i)
xmap if <Plug>(textobj-function-i)
omap aF <Plug>(textobj-function-A)
xmap aF <Plug>(textobj-function-A)
omap iF <Plug>(textobj-function-I)
xmap iF <Plug>(textobj-function-I)
'''

[[plugins]]
repo = 'kana/vim-textobj-indent' # {{{2
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap ai <Plug>(textobj-indent-a)
xmap ai <Plug>(textobj-indent-a)
omap ii <Plug>(textobj-indent-i)
xmap ii <Plug>(textobj-indent-i)
omap aI <Plug>(textobj-indent-same-a)
xmap aI <Plug>(textobj-indent-same-a)
omap iI <Plug>(textobj-indent-same-i)
xmap iI <Plug>(textobj-indent-same-i)
'''

[[plugins]]
repo = 'gilligan/textobj-lastpaste' # {{{2
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
omap iP <Plug>(textobj-lastpaste-i)
xmap iP <Plug>(textobj-lastpaste-i)
'''

# ==================== Comment =================== {{{1
[[plugins]]
repo = 'tyru/caw.vim' # {{{2
on_map = '<Plug>'
hook_add = '''
nmap gc <Plug>(caw:prefix)
xmap gc <Plug>(caw:prefix)
nmap gcc <Plug>(caw:hatpos:toggle)
xmap gcc <Plug>(caw:hatpos:toggle)
'''

# ==================== Yank/Paste ================ {{{1
[[plugins]]
repo = 'LeafCage/yankround.vim' # {{{2
hook_add = '''
nmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)
let g:yankround_max_history = 100
'''

# ==================== Git ======================= {{{1
[[plugins]]
repo = 'itchyny/vim-gitbranch' # {{{2

[[plugins]]
repo = 'lambdalisue/gina.vim' # {{{2
on_cmd = 'Gina'
hook_add = '''
nnoremap [Space]gs :<C-u>Gina status<CR>
nnoremap [Space]gb :<C-u>Gina blame<CR>
nnoremap [Space]gg :<C-u>Gina grep<CR>
nnoremap [Space]gd :<C-u>Gina diff<CR>
nnoremap [Space]gl :<C-u>Gina ls-files<CR>
nnoremap [Space]gp :<C-u>Gina push<CR>
'''

# ==================== Filetype (go) ============= {{{1
[[plugins]]
repo = 'fatih/vim-go' # {{{2
on_ft = 'go'
hook_add = '''
let g:go_auto_type_info = 1
let g:go_snippet_engine = "neosnippet"
let g:go_fmt_command = "goimports"

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

let g:go_metalinter_autosave = 1
let g:go_fmt_autosave = 0
let g:go_gocode_unimported_packages = 1
" au MyAutoCmd BufWritePost *.go GoMetaLinter
" au MyAutoCmd BufWritePre *.go silent GoFmt

au MyAutoCmd BufNew,BufRead *.go call s:vim_go_cfg()

function! s:vim_go_cfg() abort
  setl foldmethod=syntax
  setl tabstop=4
  setl shiftwidth=4
  setl softtabstop=0
  setl noexpandtab

  nmap <buffer> <Leader>gd <Plug>(go-doc)
  nmap <buffer> <Leader>gs <Plug>(go-doc-split)
  nmap <buffer> <Leader>gv <Plug>(go-doc-vertical)
  nmap <buffer> <Leader>gb <Plug>(go-doc-browser)
  nmap <buffer> <Leader>gr <Plug>(go-rename)

  " nmap <buffer> <Leader>r <Plug>(go-run)
  nmap <buffer> <Leader>gb <Plug>(go-build)
  nmap <buffer> <Leader>gt <Plug>(go-test)
  nmap <buffer> <Leader>gc <Plug>(go-coverage)

  nmap <buffer> <Leader>ds <Plug>(go-def-split)
  nmap <buffer> <Leader>dv <Plug>(go-def-vertical)
  nmap <buffer> <Leader>dt <Plug>(go-def-tab)
  nnoremap <buffer> <Leader>gi :<C-u>GoImport<Space>

  setl completeopt=menu,preview
endfunction
'''

# ==================== Filetype (ps1) ============ {{{1
[[plugins]]
repo = 'PProvost/vim-ps1' # {{{2
on_ft = 'ps1'
hook_source = '''
function! s:addHeaderPs1(flg)
  setl fenc=cp932
  setl ff=dos
  let lines = []
  if a:flg
    call add(lines, "@set __SCRIPTPATH=%~f0&@powershell -NoProfile -ExecutionPolicy ByPass -InputFormat None \"$s=[scriptblock]::create((gc \\\"%~f0\\\"|?{$_.readcount -gt 2})-join\\\"`n\\\");&$s\" %*")
  else
    call add(lines, "@set __SCRIPTPATH=%~f0&@powershell -Version 2.0 -NoProfile -ExecutionPolicy ByPass -InputFormat None \"$s=[scriptblock]::create((gc \\\"%~f0\\\"|?{$_.readcount -gt 2})-join\\\"`n\\\");&$s\" %*&@ping -n 30 localhost>nul")
  endif
  call add(lines, "@exit /b %errorlevel%")
  call extend(lines, readfile(expand("%")))
  let i = 0
  for line in lines
    if len(lines) != (i + 1)
      let lines[i] .= "\r"
    endif
    let i += 1
  endfor
  " let s:basedir = expand("%:p:h") . "/../cmd/"
  let s:basedir = expand("%:p:h") . "/"
  let s:cmdFile = expand("%:p:t:r") . ".cmd"
  call Mkdir(s:basedir)
  call writefile(lines,  s:basedir . s:cmdFile, "b")
  echo "Write " . s:basedir . expand("%:p:t:r") . ".cmd"
endfunction
" au MyAutoCmd BufWritePost *.ps1 call <SID>addHeaderPs1(0)
au MyAutoCmd FileType ps1 nnoremap <buffer> <expr><Leader>m <SID>addHeaderPs1(1)
au MyAutoCmd FileType ps1 nnoremap <buffer> <expr><Leader>b <SID>addHeaderPs1(0)
au MyAutoCmd BufNew,BufRead *.ps1 setl fdm=syntax
'''


# ==================== Filetype (toml) =========== {{{1
[[plugins]]
repo = 'cespare/vim-toml' # {{{2
on_ft = 'toml'


# ==================== Filetype (yaml) =========== {{{1
[[plugins]]
repo = 'stephpy/vim-yaml' # {{{2
on_ft = 'yaml'


# ==================== Filetype (plantuml) ======= {{{1
[[plugins]]
repo =  'aklt/plantuml-syntax' # {{{2
on_ft = 'plantuml'

[[plugins]]
repo = 'scrooloose/vim-slumlord' # {{{2
on_ft = 'plantuml'
hook_add = '''
let g:slumlord_separate_win = 1
'''


# ==================== Filetype (log) ============ {{{1
[[plugins]]
repo = 'dzeban/vim-log-syntax' # {{{2
on_ft = 'log'

# ==================== Filetype (Vue) ============ {{{1
[[plugins]]
repo = 'posva/vim-vue' # {{{2
on_ft = 'vue'

# ==================== Filetype (javascript) ===== {{{1
[[plugins]]
repo = 'pangloss/vim-javascript' # {{{2
on_ft = ['javascript', 'javascript.jsx']

# [[plugins]]
# repo = 'billyvg/tigris.nvim' # {{{2
# if = '!g:is_windows'
# on_ft = ['javascript', 'javascript.jsx']
# depends = 'node-host'
# build = './install.sh'
# hook_add = '''
# let g:tigris#enabled = 1
# '''

# [[plugins]]
# repo = 'neovim/node-host'
# lazy = 1
# build = 'npm i'

# [[plugins]]
# repo = 'othree/javascript-libraries-syntax.vim' # {{{2
# on_ft = ['javascript', 'javascript.jsx', 'typescript']

# [[plugins]]
# repo = 'othree/es.next.syntax.vim' # {{{2
# on_ft = ['javascript', 'javascript.jsx', 'typescript']

# ==================== Filetype (elm) ===== {{{1
[[plugins]]
repo = 'ElmCast/elm-vim' # {{{2
build = 'npm i -g elm elm-test elm-oracle elm-format'
on_ft = 'elm'


# ==================== Filetype (typescript) ===== {{{1
[[plugins]]
repo = 'leafgarland/typescript-vim' # {{{2
on_ft = ['typescript']

# ==================== Filetype (coffee-script) == {{{1
[[plugins]]
repo = 'kchmck/vim-coffee-script' # {{{2
on_ft = 'coffee'

# ==================== Filetype (fish-shell) ===== {{{1
[[plugins]]
repo = 'dag/vim-fish' # {{{2
on_ft = 'fish'

# ==================== Filetype (markdown) ======= {{{1
# [[plugins]]
# repo = 'rhysd/vim-gfm-syntax'
# on_ft = 'markdown'

[[plugins]]
repo = 'nelstrom/vim-markdown-folding'
on_ft = 'markdown'

# ==================== Filetype (Dockerfile) ===== {{{1
[[plugins]]
repo = 'ekalinin/Dockerfile.vim' # {{{2
on_ft = 'Dockerfile'

# ==================== Filetype (Rust) =========== {{{1
[[plugins]]
repo = 'rust-lang/rust.vim' # {{{2
on_ft = 'rust'
if = "executable('cargo')"
hook_add = '''
let g:rust_bang_comment_leader = 1
let g:rust_conceal = 0
let g:rust_conceal_mod_path = 0
let g:rust_conceal_pub = 0
let g:rust_fold = 1
let g:rust_recommended_style = 1
let g:rustfmt_autosave = 1
let g:rustfmt_fail_silently = 0

'''

[[plugins]]
repo = 'rhysd/rust-doc.vim' # {{{2
on_ft = 'rust'


# ==================== Filetype (Haskell) ======== {{{1
[[plugins]]
repo = 'eagletmt/ghcmod-vim' # {{{2
on_ft = 'haskell'
if = "executable('stack')"
build = 'stack install ghc-mod'
hook_add = '''
au MyAutoCmd BufNew,BufRead *.hs call s:my_haskell_settings()

function! s:my_haskell_settings() abort
  setl completeopt=menu,preview
  nnoremap <buffer> K :<C-u>GhcModInfoPreview<CR>
endfunction
'''

[[plugins]]
repo = 'eagletmt/neco-ghc' # {{{2
on_ft = 'haskell'
hook_add = '''
au MyAutoCmd FileType haskell setl omnifunc=necoghc#omnifunc
'''

[[plugins]]
repo = 'itchyny/vim-haskell-indent' # {{{2
on_ft = 'haskell'

[[plugins]]
repo = 'itchyny/vim-haskell-sort-import' # {{{2
on_ft = 'haskell'
hook_add = '''
au MyAutoCmd BufWritePre *.hs HaskellSortImport
'''


# ==================== Filetype (SQL) ============ {{{1
# [[plugins]]
# repo = 'mattn/vim-sqlfmt'
# on_ft = 'sql'
# hook_add = '''
#   au MyAutoCmd BufWrite *.sql :SQLFmt
# '''

[[plugins]]
repo = 'b4b4r07/vim-sqlfmt' # {{{2
on_ft = 'sql'
build = 'go get github.com/jackc/sqlfmt'
hook_add = '''
let g:sqlfmt_command = "sqlformat"
let g:sqlfmt_options = "-r -k upper"
'''

# ==================== Filetype (apiblueprint) === {{{1
[[plugins]]
repo = 'kylef/apiblueprint.vim' # {{{2
on_ft = 'apiblueprint'


# ==================== Filetype (purescript) ===== {{{1
[[plugins]]
repo = 'FrigoEU/psc-ide-vim' # {{{2
on_ft = 'purescript'

[[plugins]]
repo = 'purescript-contrib/purescript-vim' # {{{2
on_ft = 'purescript'

# ==================== Filetype (csv) ============ {{{1
[[plugins]]
repo = 'mechatroner/rainbow_csv' # {{{2
on_ft = 'csv'

# ==================== After ftplugin ============ {{{1
[ftplugin]
_ = '''
set formatoptions-=ro
'''

dosbatch = '''
setl fenc=cp932 ff=dos
'''

html = '''
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_syntax_folding = 1
setl noexpandtab
setl ts=4 sw=4 sts=0
setl foldmethod=syntax
'''

csv = '''
setl nowrap
'''

log = '''
setl nowrap
'''

mail = '''
setl ff=dos
setl fenc=cp932
'''

markdown = '''
setl formatoptions+=t
setl conceallevel=0
" set background=light

let b:autodate_format = "%Y-%m-%dT%H:%M:%S+09:00"
let b:autodate_keyword_pre  = 'date: "'
let b:autodate_keyword_post = '"'
'''

ps1 = '''
setl ts=2 sw=2 sts=0
setl foldmethod=syntax
'''

python = '''
setl cinwords=if,elif,else,for,while,try,except,finally,def,class
setl expandtab
setl ts=8 sw=4 sts=4
setl foldmethod=indent foldlevel=99
'''

scala = '''
" http://vim-users.jp/2013/02/vim-advent-calendar-2012-ujihisa-4/
function! s:ujihisa_start_sbt() "{{{2
  execute 'VimShellInteractive sbt'
  stopinsert
  let t:sbt_bufname = bufname('%')
  if !has_key(t:, 'sbt_cmds')
    let t:sbt_cmds = [input('t:sbt_cmds[0] = ')]
  endif
  wincmd p
endfunction

command! -nargs=0 StartSBT call <SID>ujihisa_start_sbt()

function! s:sbt_run() "{{{2
  let cmds = get(t:, 'sbt_cmds', 'run')

  let sbt_bufname = get(t:, 'sbt_bufname')
  if sbt_bufname !=# ''
    call vimshell#interactive#set_send_buffer(sbt_bufname)
    call vimshell#interactive#send(cmds)
  else
    echoerr 'try StartSBT'
  endif
endfunction

function! s:vimrc_scala() "{{{2
  nnoremap <buffer> [Space]m :<C-u>write<Cr>:call <SID>sbt_run()<Cr>
endfunction

augroup vimrc_scala "{{{2
  autocmd!
  au FileType scala call s:vimrc_scala()
  au FileType scala nnoremap <buffer> [Space]st :<C-u>StartSBT<Cr>
augroup END
'''

xml = '''
setl noexpandtab
setl ts=4 sw=4 sts=0

let g:xml_syntax_folding = 1
setl foldmethod=syntax
'''

elm = '''
setl ts=4 sw=4 sts=0
'''


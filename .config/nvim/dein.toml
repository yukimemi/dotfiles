# =============================================================================
# File        : dein.toml
# Author      : yukimemi
# Last Change : 2017/06/24 14:27:15.
# =============================================================================

[[plugins]]
repo = 'Shougo/dein.vim'

# ==================== Visual ==================== {{{1
[[plugins]]
repo = 'tomasr/molokai'
lazy = 1

[[plugins]]
repo = 'altercation/vim-colors-solarized'
lazy = 1

[[plugins]]
repo = 'lifepillar/vim-solarized8'
lazy = 1

[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'aereal/vim-colors-japanesque'

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'endel/vim-github-colorscheme'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
        \ 'colorscheme': 'onedark',
        \ 'mode_map': {
        \   'n' : 'N',
        \   'i' : 'I',
        \   'R' : 'R',
        \   'v' : 'V',
        \   'V' : 'V-L',
        \   'c' : 'C',
        \   "\<C-v>": 'V-B',
        \   's' : 'S',
        \   'S' : 'S-L',
        \   "\<C-s>": 'S-B'
        \   },
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'filename', 'anzu' ] ],
        \   'right': [ [ 'lineinfo' ], [ 'percent' ], [ 'fileformat', 'fileencoding', 'bomb', 'filetype' ],
        \              [ 'absolutepath', 'charcode' ] ]
        \ },
        \ 'component': {
        \   'charcode': '[%03.3b, 0x%02.2B]'
        \ },
        \ 'component_function': {
        \   'modified': 'MyModified',
        \   'readonly': 'MyReadonly',
        \   'fugitive': 'MyFugitive',
        \   'git_branch': 'MyGitBranch',
        \   'git_traffic': 'MyGitTraffic',
        \   'git_status': 'MyGitStatus',
        \   'filename': 'MyFilename',
        \   'fileformat': 'MyFileformat',
        \   'filetype': 'MyFiletype',
        \   'fileencoding': 'MyFileencoding',
        \   'bomb': 'MyBomb',
        \   'absolutepath': 'MyAbsolutePath',
        \   'mode': 'MyMode',
        \   'anzu': 'anzu#search_status',
        \ }
        \ }

  function! MyModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! MyReadonly()
    if g:is_windows
      return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'R' : ''
    else
      return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'тнд' : ''
    endif
  endfunction

  function! MyFilename()
    return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
          \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
          \ ('' != MyModified() ? ' ' . MyModified() : '')
  endfunction

  function! MyGitBranch()
    return winwidth(0) > 70 ? gita#statusline#preset('branch_fancy') : ''
  endfunction
  function! MyGitTraffic()
    return winwidth(0) > 70 ? gita#statusline#preset('traffic_fancy') : ''
  endfunction
  function! MyGitStatus()
    return winwidth(0) > 70 ? gita#statusline#preset('status') : ''
  endfunction

  function! MyFugitive()
    if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
      let _ = fugitive#head()
      if g:is_windows
        return strlen(_) ? '| '._ : ''
      else
        return strlen(_) ? 'тна '._ : ''
      endif
    endif
    return ''
  endfunction

  function! MyFileformat()
    return winwidth('.') > 70 ? &fileformat : ''
  endfunction

  function! MyFiletype()
    return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
  endfunction

  function! MyFileencoding()
    return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
  endfunction

  function! MyBomb()
    return &bomb ? 'b' : 'nb'
  endfunction

  function! MyMode()
    return winwidth('.') > 60 ? lightline#mode() : ''
  endfunction

  function! MyAbsolutePath()
    return (winwidth('.') - strlen(expand('%:p')) > 90) ? expand('%:p') : ((winwidth('.') - strlen(expand('%')) > 70) ? expand('%') : '')
  endfunction
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_faster = 1
  nnoremap <silent><Leader>i :<C-u>IndentLinesToggle<CR>
  let g:indentLine_fileTypeExclude = ['help', 'nerdtree', 'calendar', 'thumbnail', 'denite', 'vimfiler', 'tweetvim']
'''

[[plugins]]
repo = 'itchyny/vim-highlighturl'

[[plugins]]
repo = 'taku-o/vim-zoom'
if = "has('gui')"

[[plugins]]
repo = 'vim-scripts/matchit.zip'


# ==================== Complement ================ {{{1
[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = "has('nvim')"
on_i = 1
hook_add = '''
  let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
depends = 'context_filetype.vim'
if = "!has('nvim')"
on_i = 1
hook_add = '''
  let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#enable_smart_case = 1
  let g:neocomplete#enable_camel_case = 1
  let g:neocomplete#enable_fuzzy_completion = 1
  let g:neocomplete#auto_completion_start_length = 2
  let g:neocomplete#manual_completion_start_length = 0
  let g:neocomplete#min_keyword_length = 3
  let g:neocomplete#enable_auto_delimiter = 1
  " let g:neocomplete#sources#syntax#min_keyword_length = 1
  " let g:neocomplete#skip_auto_completion_time = 5
  " let g:neocomplete#enable_auto_close_preview = 0
  " Define dictionary.
  let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default': '',
        \ 'vimshell': $HOME . '/.vimshell_hist',
        \ 'scheme': $HOME . '/.gosh_completions',
        \ 'coffee': $VIM_PATH . '/dict/coffee.dict',
        \ 'vbs': $VIM_PATH . '/dict/vbs.dict',
        \ 'dosbatch': $VIM_PATH . '/dict/dosbatch.dict',
        \ 'scala': $VIM_PATH . '/dict/scala.dict',
        \ 'ps1': $VIM_PATH . '/dict/ps1.dict',
        \ 'javascript': $VIM_PATH . '/dict/wsh.dict',
        \ 'ruby': $VIM_PATH . '/dict/ruby.dict'
        \ }

  " Define keyword.
  if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  " Enable omni completion.
  au MyAutoCmd FileType css setl omnifunc=csscomplete#CompleteCSS
  au MyAutoCmd FileType html,markdown setl omnifunc=htmlcomplete#CompleteTags
  au MyAutoCmd FileType javascript setl omnifunc=javascriptcomplete#CompleteJS
  au MyAutoCmd FileType python setl omnifunc=pythoncomplete#Complete
  au MyAutoCmd FileType xml setl omnifunc=xmlcomplete#CompleteTags

  " Enable heavy omni completion.
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
  endif

  " SQL
  " let g:neocomplete#sources#omni#functions.sql = 'sqlcomplete#Complete'
  " typescript
  " let g:neocomplete#sources#omni#functions.typescript = 'TSScompleteFunc'

  let g:neocomplete#force_omni_input_patterns.typescript = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
  let g:neocomplete#force_omni_input_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
  let g:neocomplete#force_omni_input_patterns.go = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
  " let g:neocomplete#force_omni_input_patterns.go = '[^. *\t]\.\w*\|\h\w*::'
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_i = 1
on_ft = 'snippet'
hook_source = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  " Tell Neosnippet about the other snippets
  let g:neosnippet#snippets_directory = $VIM_PATH . '/snippets'

  " For snippet_complete marker.
  if has('conceal')
    set conceallevel=2 concealcursor=i
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_i = 1

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'zchee/deoplete-go'
depends = 'deoplete.nvim'
if = "has('nvim')"
on_ft = 'go'
build = 'make'
hook_add = '''
  let g:deoplete#sources#go#use_cache = 1
  let g:deoplete#sources#go#json_directory = '~/.cache/deoplete/go/$GOOS_$GOARCH'
  let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
  let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
'''

# [[plugins]]
# repo = 'carlitux/deoplete-ternjs'
# depends = 'deoplete.nvim'
# if = "has('nvim')"
# on_ft = ['javascript', 'typescript']
# build = 'npm install -g tern'

# [[plugins]]
# repo = 'maralla/completor.vim'
# if = "has('python')"

# ==================== Utility =================== {{{1
[[plugins]]
repo = 'airblade/vim-rooter'
hook_add = '''
  let g:rooter_use_lcd = 1
'''

[[plugins]]
repo = 'thinca/vim-submode'
hook_add = '''
  let g:submode_leave_with_key = 1
  call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
  call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
  call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
  call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
  call submode#map('bufmove', 'n', '', '>', '<C-w>>')
  call submode#map('bufmove', 'n', '', '<', '<C-w><')
  call submode#map('bufmove', 'n', '', '+', '<C-w>+')
  call submode#map('bufmove', 'n', '', '-', '<C-w>-')
'''

[[plugins]]
repo = 't9md/vim-choosewin'
on_map = '<Plug>'
on_source = 'vimfiler.vim'
hook_source = '''
  " nmap - <Plug>(choosewin)

  let g:choosewin_overlay_enable = 1
  let g:choosewin_overlay_clear_multibyte = 1

  " color like tmux
  let g:choosewin_color_overlay = {
        \ 'gui': ['DodgerBlue3', 'DodgerBlue3' ],
        \ 'cterm': [ 25, 25 ]
        \ }
  let g:choosewin_color_overlay_current = {
        \ 'gui': ['firebrick1', 'firebrick1' ],
        \ 'cterm': [ 124, 124 ]
        \ }

  let g:choosewin_blink_on_land = 0
  let g:choosewin_statusline_replace = 0
  let g:choosewin_tabline_replace = 0
'''

[[plugins]]
repo = 'Konfekt/FastFold'
on_path = '.*'
hokk_add = '''
  let g:fastfold_savehook = 0
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
if = "!has('kaoriya')"
build = 'make'

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>(EasyAlign)'
hook_add = '''
  vmap <Enter> <Plug>(EasyAlign)

  let g:easy_align_delimiters = {
        \ '>': {
        \       'pattern': '>>\|=>\|>.\+',
        \       'right_margin': 0,
        \       'delimiter_align': 'l'
        \   },
        \ '/': {
        \       'pattern': '//\+\|/\*\|\*/',
        \       'delimiter_align': 'l',
        \       'ignore_groups': ['!Comment']
        \   },
        \ ']': {
        \       'pattern': '[[\]]',
        \       'left_margin': 0,
        \       'right_margin': 0,
        \       'stick_to_left': 0
        \   },
        \ ')': {
        \       'pattern': '[()]',
        \       'left_margin': 0,
        \       'right_margin': 0,
        \       'stick_to_left': 0
        \   },
        \ 'd': {
        \       'pattern': ' \(\S\+\s*[;=]\)\@=',
        \       'left_margin': 0,
        \       'right_margin': 0
        \   },
        \ 'p': {
        \       'pattern': 'pos=\|size=',
        \       'right_margin': 0
        \   },
        \ 's': {
        \       'pattern': 'sys=\|Trns=',
        \       'right_margin': 0
        \   },
        \ 'k': {
        \       'pattern': 'key=\|cmt=',
        \       'right_margin': 0
        \   },
        \ 'c': {
        \       'pattern': 'cmt=',
        \       'right_margin': 0
        \   },
        \ ':': {
        \       'pattern': ':',
        \       'left_margin': 1,
        \       'right_margin': 1,
        \       'stick_to_left': 0,
        \       'ignore_groups': []
        \   },
        \ 't': {
        \       'pattern': "\<tab>",
        \       'left_margin': 0,
        \       'right_margin': 0
        \   }
        \ }
'''

[[plugins]]
repo = 'glidenote/memolist.vim'
on_cmd = ['Memolist', 'MemoNew']
hook_add = '''
  if isdirectory($HOME . '/Dropbox')
    let g:memolist_path = $HOME . '/Dropbox/memolist'
  else
    let g:memolist_path = $HOME . '/.memolist'
  endif

  call Mkdir(g:memolist_path)

  let g:memolist_memo_suffix = "md"

  " mappings
  nnoremap <Leader>mn :<C-u>MemoNew<CR>
  nnoremap <Leader>ml :<C-u>MemoList<CR>
  nnoremap <Leader>mg :<C-u>MemoGrep<CR>
  " nmap <Leader>mf :exe "CtrlP" g:memolist_path<CR><F5>

  " use various Ex commands (default '')
  " let g:memolist_ex_cmd = 'CtrlP'
'''

[[plugins]]
repo = 'mattn/sonictemplate-vim'
on_cmd = 'Template'
hook_add = '''
  let g:sonictemplate_vim_template_dir = '$HOME/.vim/template'
  let g:sonictemplate_vim_vars = {
        \ '_': {
        \   'author': 'yukimemi',
        \   'mail': 'yukimemi@gmail.com',
        \ },
        \ }
'''

[[plugins]]
repo = 'basyura/twibill.vim'
lazy = 1

[[plugins]]
repo = 'basyura/TweetVim''
depends = ['twibill.vim', 'open-browser.vim', 'bitly.vim', 'favstar-vim', 'webapi-vim']
on_cmd = ['TweetVimHomeTimeline', 'TweetVimUserStream','TweetVimSay']
on_ft = 'tweetvim'
hook_add = '''
  au MyAutoCmd FileType tweetvim call s:my_tweetvim_mappings()
  function! s:my_tweetvim_mappings()
    setl nowrap
    nnoremap <buffer> [Space]s :<C-u>TweetVimSay<CR>
  endfunction

  nnoremap [Space]tu :<C-u>TweetVimUserStream<CR>

  let g:tweetvim_default_account = "yukimemi"
  let g:tweetvim_tweet_per_page = 100
  let g:tweetvim_cache_size = 50
  "let g:tweetvim_display_username = 1
  let g:tweetvim_display_source = 1
  let g:tweetvim_display_time = 1
  "let g:tweetvim_display_icon = 1
  let g:tweetvim_async_post = 1
'''

[[plugins]]
repo = 'mattn/webapi-vim'
lazy = 1

[[plugins]]
repo = 'tyru/open-browser.vim'
lazy = 1

[[plugins]]
repo = 'vim-scripts/autodate.vim'
hook_add = '''
  let g:autodate_format = "%Y/%m/%d %H:%M:%S"
  let g:autodate_keyword_pre  = "Last Change *:"
  let g:autodate_keyword_post = "."
'''

[[plugins]]
repo = 'sjl/gundo.vim'
if = "has('python')"

[[plugins]]
repo = 'simnalamburt/vim-mundo'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'sbdchd/neoformat'
hook_add = '''
  au MyAutoCmd BufWritePre * Neoformat
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_linters = {
        \ 'go': ['golint', 'go vet', 'goimports'],
        \ 'haskell': ['hlint']
        \ }
  let g:ale_lint_on_text_changed = 'never'
  let g:ale_lint_on_enter = 0
  let g:ale_lint_on_insert_leave = 0
  let g:ale_lint_on_save = 1
  nmap <silent> <C-k> <Plug>(ale_previous_wrap)
  nmap <silent> <C-j> <Plug>(ale_next_wrap)

  " Rust.
  let g:ale_rust_ignore_error_codes = ['E0432', 'E0433']
'''


# [[plugins]]
# repo = 'yuttie/comfortable-motion.vim'

[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = ['Capture']

[[plugins]]
repo = 'cocopon/vaffle.vim'
on_cmd = ['Vaffle']
hook_add = '''
  " nnoremap [Space]v :<C-u>Vaffle<CR>
'''
hook_post_source = '''
  let g:loaded_netrw       = 1
  let g:loaded_netrwPlugin = 1
'''

[[plugins]]
repo = 'justinmk/vim-dirvish'
on_cmd = ['Dirvish']
hook_add = '''
  " nnoremap [Space]v :<C-u>Dirvish<CR>
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
on_cmd = ['NERDTreeToggle', 'NERDTree', 'NERDTreeFind']
hook_add = '''
  " nnoremap [Space]v :NERDTreeToggle<CR>
  nnoremap [Space]v :NERDTreeFind<CR>
  au MyAutoCmd StdinReadPre * let s:std_in=1
  au MyAutoCmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
'''


# [[plugins]]
# repo = 'fuenor/qfixhowm'
# hook_add = '''
#   let QFixHowm_Key = 'g'
#   let howm_dir          = '~/.howm'
#   let howm_filename     = '%Y/%m/%Y-%m-%d-%H%M%S.md'
#   let howm_fileencoding = 'utf-8'
#   let howm_fileformat   = 'unix'
#
#   let QFixWin_EnableMode = 1
#   " Use markdown.
#   let QFixHowm_FileType = 'markdown'
#   let QFixHowm_Title = '#'
# '''

[[plugins]]
repo = 'vitalk/vim-simple-todo'
on_ft = 'markdown'

[[plugins]]
repo = 'kassio/neoterm'
if = "has('nvim')"
on_cmd = ['T', 'Tnew']
hook_add = '''
  let g:neoterm_autoinsert = 1
  nnoremap [Space]s :<C-u>terminal<CR>
  tnoremap sj <C-\><C-n><C-w>j
  tnoremap sk <C-\><C-n><C-w>k
  tnoremap sl <C-\><C-n><C-w>l
  tnoremap sh <C-\><C-n><C-w>h
'''

[[plugins]]
repo = 'lambdalisue/vim-findent'
on_cmd = 'Findent'

[[plugins]]
repo = 'haya14busa/dein-command.vim'
oncmd = 'Dein'

# ==================== Denite ==================== {{{1
[[plugins]]
repo = 'Shougo/denite.nvim'
depends = 'neomru.vim'
on_cmd = 'Denite'
if = "has('python3')"
hook_add = '''
  " Use plefix s
  nnoremap suc :<C-u>Denite colorscheme -auto-preview<CR>
  nnoremap sub :<C-u>Denite buffer<CR>
  nnoremap suf :<C-u>Denite file<CR>
  nnoremap suF :<C-u>Denite file_rec<CR>
  " nnoremap suu :<C-u>Denite buffer file_old<CR>
  nnoremap suu :<C-u>Denite buffer file_mru<CR>
  nnoremap suo :<C-u>Denite outline -no-quit -mode=normal<CR>
  nnoremap suh :<C-u>Denite help<CR>
  nnoremap sur :<C-u>Denite register<CR>
  nnoremap sug :<C-u>Denite grep -no-empty<CR>
  nnoremap su/ :<C-u>Denite line -no-quit<CR>
  nnoremap suR :<C-u>Denite -resume<CR>

  noremap sul :<C-u>Denite command_history<CR>

  " Incremental search in cmdline history.
  inoremap <C-l> <ESC>:<C-u>Denite command<CR>
'''
hook_post_source = '''
  " Default options.
	call denite#custom#option('default', {
        \ 'prompt': '┬╗',
        \ 'cursor_wrap': v:true,
        \ 'auto_resize': v:true,
        \ 'highlight_mode_insert': 'WildMenu'
        \ })
  if executable('jvgrep')
    " jvgrep command on grep source
    call denite#custom#var('grep', 'command', ['jvgrep'])
    call denite#custom#var('grep', 'default_opts', [])
    call denite#custom#var('grep', 'recursive_opts', ['-R'])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', [])
    call denite#custom#var('grep', 'final_opts', [])

  elseif executable('rg')
    " Ripgrep command on grep source
    call denite#custom#var('grep', 'command', ['rg'])
    call denite#custom#var('grep', 'default_opts',
        \ ['--vimgrep', '--no-heading'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])

  elseif executable('pt')
    " Pt command on grep source
    call denite#custom#var('grep', 'command', ['pt'])
    call denite#custom#var('grep', 'default_opts',
          \ ['--nogroup', '--nocolor', '--smart-case'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
  endif
  " custom mappings.
  call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>', 'noremap')
  call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>', 'noremap')
  call denite#custom#map('insert', '<C-[>', '<denite:enter_mode:normal>', 'noremap')
  call denite#custom#map('normal', '<C-[>', '<denite:quit>', 'noremap')
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'

# ==================== Search ==================== {{{1
[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = '<Plug>'

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = '<Plug>'

[[plugins]]
repo = 'haya14busa/incsearch.vim'
depends = ['vim-asterisk', 'vim-anzu']
on_map = '<Plug>'
hook_add = '''
  map /  <Plug>(incsearch-forward)
  map ?  <Plug>(incsearch-backward)
  map g/ <Plug>(incsearch-stay)

  let g:incsearch#auto_nohlsearch = 1
  map n <Plug>(incsearch-nohl)<Plug>(anzu-n)zv
  map N <Plug>(incsearch-nohl)<Plug>(anzu-N)zv
  map *   <Plug>(incsearch-nohl)<Plug>(asterisk-*)zv
  map g*  <Plug>(incsearch-nohl)<Plug>(asterisk-g*)zv
  map #   <Plug>(incsearch-nohl)<Plug>(asterisk-#)zv
  map g#  <Plug>(incsearch-nohl)<Plug>(asterisk-g#)zv

  map z*  <Plug>(incsearch-nohl0)<Plug>(asterisk-z*)
  map gz* <Plug>(incsearch-nohl0)<Plug>(asterisk-gz*)
  map z#  <Plug>(incsearch-nohl0)<Plug>(asterisk-z#)
  map gz# <Plug>(incsearch-nohl0)<Plug>(asterisk-gz#)
'''

[[plugins]]
repo = 't9md/vim-quickhl'
hook_add = '''
  let g:quickhl_manual_enable_at_startup = 1

  nmap [Space]m <Plug>(quickhl-manual-this)
  xmap [Space]m <Plug>(quickhl-manual-this)
  nmap [Space]M <Plug>(quickhl-manual-reset)
  xmap [Space]M <Plug>(quickhl-manual-reset)

  let g:quickhl_manual_keywords = [
        \ "хд▒цХЧ",
        \ "шнжхСК",
        \ "уВиуГйуГ╝",
        \ "чХ░х╕╕",
        \ "warn",
        \ "WARN",
        \ "error",
        \ "ERROR",
        \ ]
'''

[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add = 'let g:loaded_matchparen = 1'

[[plugins]]
repo = 'itchyny/vim-cursorword'
hook_add = '''
  function! s:ToggleCursorWord() abort
    let b:cursorword = !get(b:, 'cursorword', 1)
  endfunction

  com! ToggleCursorWord call s:ToggleCursorWord()
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_ft = ['quickfix']


# ==================== Operators ================= {{{1
[[plugins]]
repo = 'kana/vim-operator-user'
on_map = '<Plug>'

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = 'map _ <Plug>(operator-replace)'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = '''
  map sA <Plug>(operator-surround-append)
  map sD <Plug>(operator-surround-delete)
  map sR <Plug>(operator-surround-replace)
'''

[[plugins]]
repo = 'osyo-manga/vim-operator-blockwise'
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = '''
  nmap YY <Plug>(operator-blockwise-yank-head)
  nmap DD <Plug>(operator-blockwise-delete-head)
  nmap CC <Plug>(operator-blockwise-change-head)
'''

[[plugins]]
repo = 'osyo-manga/vim-operator-search'
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = 'nmap [Space]/ <Plug>(operator-search)'

[[plugins]]
repo = 'haya14busa/vim-operator-flashy'
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = '''
  map y <Plug>(operator-flashy)
  nmap Y <Plug>(operator-flashy)$
'''



# ==================== Textobjs ================== {{{1
[[plugins]]
repo = 'kana/vim-textobj-user'
on_map = '<Plug>'

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  omap ab <Plug>(textobj-multiblock-a)
  omap ib <Plug>(textobj-multiblock-i)
  xmap ab <Plug>(textobj-multiblock-a)
  xmap ib <Plug>(textobj-multiblock-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  omap ae <Plug>(textobj-entire-a)
  xmap ae <Plug>(textobj-entire-a)
  omap ie <Plug>(textobj-entire-i)
  xmap ie <Plug>(textobj-entire-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-fold'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  omap az <Plug>(textobj-fold-a)
  xmap az <Plug>(textobj-fold-a)
  omap iz <Plug>(textobj-fold-i)
  xmap iz <Plug>(textobj-fold-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-function'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  omap af <Plug>(textobj-function-a)
  xmap af <Plug>(textobj-function-a)
  omap if <Plug>(textobj-function-i)
  xmap if <Plug>(textobj-function-i)
  omap aF <Plug>(textobj-function-A)
  xmap aF <Plug>(textobj-function-A)
  omap iF <Plug>(textobj-function-I)
  xmap iF <Plug>(textobj-function-I)
'''

[[plugins]]
repo = 'kana/vim-textobj-indent'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  omap ai <Plug>(textobj-indent-a)
  xmap ai <Plug>(textobj-indent-a)
  omap ii <Plug>(textobj-indent-i)
  xmap ii <Plug>(textobj-indent-i)
  omap aI <Plug>(textobj-indent-same-a)
  xmap aI <Plug>(textobj-indent-same-a)
  omap iI <Plug>(textobj-indent-same-i)
  xmap iI <Plug>(textobj-indent-same-i)
'''

[[plugins]]
repo = 'gilligan/textobj-lastpaste'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  omap iP <Plug>(textobj-lastpaste-i)
  xmap iP <Plug>(textobj-lastpaste-i)
'''


# ==================== Comment =================== {{{1
[[plugins]]
repo = 'tyru/caw.vim'
on_map = '<Plug>'
hook_add = '''
  nmap gc <Plug>(caw:prefix)
  xmap gc <Plug>(caw:prefix)
  nmap gcc <Plug>(caw:hatpos:toggle)
  xmap gcc <Plug>(caw:hatpos:toggle)
'''


# ==================== Yank/Paste ================ {{{1
[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
  nmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
  let g:yankround_max_history = 100
'''


# ==================== Git ======================= {{{1
[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = 'Gina'
hook_add = '''
  nnoremap [Space]gs :<C-u>Gina status<CR>
  nnoremap [Space]gb :<C-u>Gina branch<CR>
  nnoremap [Space]gg :<C-u>Gina grep<CR>
  nnoremap [Space]gd :<C-u>Gina diff<CR>
  nnoremap [Space]gl :<C-u>Gina ls-files<CR>
  nnoremap [Space]gp :<C-u>Gina push<CR>
'''

[[plugins]]
repo = 'cohama/agit.vim'
on_cmd = 'Agit'

[[plugins]]
repo = 'rhysd/committia.vim'

# ==================== Filetype (go) ============= {{{1
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
  let g:go_auto_type_info = 1
  let g:go_snippet_engine = "neosnippet"
  let g:go_fmt_command = "goimports"

  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_structs = 1
  let g:go_highlight_interfaces = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_build_constraints = 1

  let g:go_metalinter_autosave = 1
  let g:go_fmt_autosave = 0
  let g:go_gocode_unimported_packages = 1
  " au MyAutoCmd BufWritePost *.go GoMetaLinter
  " au MyAutoCmd BufWritePre *.go silent GoFmt

  au MyAutoCmd BufNew,BufRead *.go call s:vim_go_cfg()

  function! s:vim_go_cfg() abort
    setl foldmethod=syntax
    setl tabstop=4
    setl shiftwidth=4
    setl softtabstop=0
    setl noexpandtab

    nmap <buffer> <Leader>gd <Plug>(go-doc)
    nmap <buffer> <Leader>gs <Plug>(go-doc-split)
    nmap <buffer> <Leader>gv <Plug>(go-doc-vertical)
    nmap <buffer> <Leader>gb <Plug>(go-doc-browser)
    nmap <buffer> <Leader>gr <Plug>(go-rename)

    " nmap <buffer> <Leader>r <Plug>(go-run)
    nmap <buffer> <Leader>gb <Plug>(go-build)
    nmap <buffer> <Leader>gt <Plug>(go-test)
    nmap <buffer> <Leader>gc <Plug>(go-coverage)

    nmap <buffer> <Leader>ds <Plug>(go-def-split)
    nmap <buffer> <Leader>dv <Plug>(go-def-vertical)
    nmap <buffer> <Leader>dt <Plug>(go-def-tab)
    nnoremap <buffer> <Leader>gi :<C-u>GoImport<Space>

    setl completeopt=menu,preview
  endfunction
'''

# ==================== Filetype (ps1) ============ {{{1
[[plugins]]
repo = 'PProvost/vim-ps1'
on_ft = 'ps1'
hook_source = '''
  function! s:addHeaderPs1(flg)
    setl fenc=cp932
    setl ff=dos
    let lines = []
    if a:flg
      call add(lines, "@set scriptPath=%~f0&@powershell -NoProfile -ExecutionPolicy ByPass -InputFormat None \"$s=[scriptblock]::create((gc \\\"%~f0\\\"|?{$_.readcount -gt 2})-join\\\"`n\\\");&$s\" %*")
    else
      call add(lines, "@set scriptPath=%~f0&@powershell -Version 2.0 -NoProfile -ExecutionPolicy ByPass -InputFormat None \"$s=[scriptblock]::create((gc \\\"%~f0\\\"|?{$_.readcount -gt 2})-join\\\"`n\\\");&$s\" %*&@ping -n 30 localhost>nul")
    endif
    call add(lines, "@exit /b %errorlevel%")
    call extend(lines, readfile(expand("%")))
    let i = 0
    for line in lines
      if len(lines) != (i + 1)
        let lines[i] .= "\r"
      endif
      let i += 1
    endfor
    " let s:basedir = expand("%:p:h") . "/../cmd/"
    let s:basedir = expand("%:p:h") . "/"
    let s:cmdFile = expand("%:p:t:r") . ".cmd"
    call Mkdir(s:basedir)
    call writefile(lines,  s:basedir . s:cmdFile, "b")
    echo "Write " . s:basedir . expand("%:p:t:r") . ".cmd"
  endfunction
  " au MyAutoCmd BufWritePost *.ps1 call <SID>addHeaderPs1(0)
  au MyAutoCmd FileType ps1 nnoremap <buffer> <expr><Leader>m <SID>addHeaderPs1(1)
  au MyAutoCmd FileType ps1 nnoremap <buffer> <expr><Leader>b <SID>addHeaderPs1(0)
'''


# ==================== Filetype (toml) =========== {{{1
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'


# ==================== Filetype (yaml) =========== {{{1
[[plugins]]
repo = 'stephpy/vim-yaml'
on_ft = 'yaml'


# ==================== Filetype (plantuml) ======= {{{1
[[plugins]]
repo =  'aklt/plantuml-syntax'
on_ft = 'plantuml'


# ==================== Filetype (log) ============ {{{1
[[plugins]]
repo = 'dzeban/vim-log-syntax'
on_ft = 'log'

# ==================== Filetype (Vue) ============ {{{1
[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'

# ==================== Filetype (javascript) ===== {{{1
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript', 'javascript.jsx']

# [[plugins]]
# repo = 'jason0x43/vim-js-indent'
# on_ft = 'javascript'

# [[plugins]]
# repo = 'mxw/vim-jsx'
# on_ft = ['javascript', 'javascript.jsx', 'typescript']

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
on_ft = ['javascript', 'javascript.jsx', 'typescript']

# [[plugins]]
# repo = 'othree/yajs.vim'
# on_ft = ['javascript', 'javascript.jsx', 'typescript']

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
on_ft = ['javascript', 'javascript.jsx', 'typescript']

[[plugins]]
repo = 'othree/es.next.syntax.vim'
on_ft = ['javascript', 'javascript.jsx', 'typescript']

[[plugins]]
repo = 'flowtype/vim-flow'
on_ft = ['javascript', 'javascript.jsx']
build = 'npm install -g flow-bin'
hook_add = '''
  let g:flow#autoclose = 1
'''

# [[plugins]]
# repo = 'maksimr/vim-jsbeautify'
# on_ft = ['javascript', 'javascript.jsx']
# on_func = ['JsBeautify', 'HtmlBeautify', 'CSSBeautify']


# ==================== Filetype (typescript) ===== {{{1
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

[[plugins]]
repo = 'Quramy/tsuquyomi'
on_ft = ['typescript']
hook_add = '''
  au MyAutoCmd FileType typescript nnoremap <buffer> <Leader>t :<C-u>echo tsuquyomi#hint()<CR>
'''

# ==================== Filetype (coffee-script) == {{{1
[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'

# ==================== Filetype (fish-shell) ===== {{{1
[[plugins]]
repo = 'dag/vim-fish'
on_ft = 'fish'

# ==================== Filetype (markdown) ======= {{{1
[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_ft = 'markdown'

# ==================== Filetype (Dockerfile) ===== {{{1
[[plugins]]
repo = 'ekalinin/Dockerfile.vim'
on_ft = 'Dockerfile'

# ==================== Filetype (Rust) =========== {{{1
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
if = "executable('cargo')"
hook_add = '''
  let g:rustfmt_autosave = 1
'''

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = 'rust'
if = "executable('cargo')"
hook_add = '''
  let g:racer_experimental_completer = 1
  setl completeopt=menu,preview
  au MyAutoCmd FileType rust nmap <buffer> gd <Plug>(rust-def)
  au MyAutoCmd FileType rust nmap <buffer> gs <Plug>(rust-def-split)
  au MyAutoCmd FileType rust nmap <buffer> gx <Plug>(rust-def-vertical)
  au MyAutoCmd FileType rust nmap <buffer> <leader>gd <Plug>(rust-doc)
'''

# [[plugins]]
# repo = 'sebastianmarkow/deoplete-rust'
# depends = 'deoplete.nvim'
# if = "has('nvim')"
# on_ft = 'rust'
# hook_add = '''
#   let g:deoplete#sources#rust#racer_binary = 'racer'
#   let g:deoplete#sources#rust#rust_source_path = expand('$RUST_SRC_PATH')
#   let g:deoplete#sources#rust#documentation_max_height = 20
# '''

[[plugins]]
repo = 'rhysd/rust-doc.vim'
on_ft = 'rust'


# ==================== Filetype (Haskell) ======== {{{1
[[plugins]]
repo = 'eagletmt/ghcmod-vim'
on_ft = 'haskell'
if = "executable('stack')"
build = 'stack install ghc-mod'
hook_add = '''
  au MyAutoCmd BufNew,BufRead *.hs call s:my_haskell_settings()

  function! s:my_haskell_settings() abort
    setl completeopt=menu,preview
    nnoremap <buffer> K :<C-u>GhcModInfoPreview<CR>
  endfunction
'''

[[plugins]]
repo = 'eagletmt/neco-ghc'
on_ft = 'haskell'
hook_add = '''
  au MyAutoCmd FileType haskell setl omnifunc=necoghc#omnifunc
'''

[[plugins]]
repo = 'itchyny/vim-haskell-indent'
on_ft = 'haskell'

[[plugins]]
repo = 'itchyny/vim-haskell-sort-import'
on_ft = 'haskell'
hook_add = '''
 au MyAutoCmd BufWritePre *.hs HaskellSortImport
'''

# [[plugins]]
# repo = 'dan-t/vim-hsimport'
# on_ft = 'haskell'


# ==================== Filetype (SQL) ============ {{{1
# [[plugins]]
# repo = 'mattn/vim-sqlfmt'
# on_ft = 'sql'
# hook_add = '''
#   au MyAutoCmd BufWrite *.sql :SQLFmt
# '''

[[plugins]]
repo = 'b4b4r07/vim-sqlfmt'
on_ft = 'sql'
build = 'go get github.com/jackc/sqlfmt'
hook_add = '''
  let g:sqlfmt_command = "sqlformat"
  let g:sqlfmt_options = "-r -k upper"
'''

# ==================== Filetype (apiblueprint) === {{{1
[[plugins]]
repo = 'kylef/apiblueprint.vim'
on_ft = 'apiblueprint'


# ==================== After ftplugin ============ {{{1
[ftplugin]
_ = '''
  set formatoptions-=ro
'''

dosbatch = '''
  setl fenc=cp932 ff=dos
'''

html = '''
  let g:html_indent_inctags = "html,body,head,tbody"
  let g:html_syntax_folding = 1
  setl noexpandtab
  setl ts=4 sw=4 sts=0
  setl foldmethod=syntax
'''

csv = '''
  setl nowrap
'''

log = '''
  setl nowrap
'''

mail = '''
  setl ff=dos
  setl fenc=cp932

  colorscheme github
'''

markdown = '''
  setl formatoptions+=t
  " setl noexpandtab
  setl conceallevel=0
  setl foldmethod=syntax
'''

ps1 = '''
  setl ts=2 sw=2 sts=0
  setl foldmethod=syntax
'''

python = '''
  setl cinwords=if,elif,else,for,while,try,except,finally,def,class
  setl expandtab
  setl ts=8 sw=4 sts=4
  setl foldmethod=indent foldlevel=99
'''

scala = '''
  " http://vim-users.jp/2013/02/vim-advent-calendar-2012-ujihisa-4/
  function! s:ujihisa_start_sbt()"{{{
    execute 'VimShellInteractive sbt'
    stopinsert
    let t:sbt_bufname = bufname('%')
    if !has_key(t:, 'sbt_cmds')
      let t:sbt_cmds = [input('t:sbt_cmds[0] = ')]
    endif
    wincmd p
  endfunction

  command! -nargs=0 StartSBT call <SID>ujihisa_start_sbt()
  "}}}

  function! s:sbt_run()"{{{
    let cmds = get(t:, 'sbt_cmds', 'run')

    let sbt_bufname = get(t:, 'sbt_bufname')
    if sbt_bufname !=# ''
      call vimshell#interactive#set_send_buffer(sbt_bufname)
      call vimshell#interactive#send(cmds)
    else
      echoerr 'try StartSBT'
    endif
  endfunction
  "}}}

  function! s:vimrc_scala()"{{{
    nnoremap <buffer> [Space]m :<C-u>write<Cr>:call <SID>sbt_run()<Cr>
  endfunction
  "}}}

  augroup vimrc_scala"{{{
    autocmd!
    au FileType scala call s:vimrc_scala()
    au FileType scala nnoremap <buffer> [Space]st :<C-u>StartSBT<Cr>
  augroup END
  "}}}
'''

xml = '''
  setl noexpandtab
  setl ts=4 sw=4 sts=0

  let g:xml_syntax_folding = 1
  setl foldmethod=syntax
'''


" option
set smoothscroll
set typelinkhints
set noautofocus
set autohidecursor
set cncpcompletion

" variable settings
let barposition = "bottom"
let blacklists = ["*://mail.google.com/*","*://feedly.com/*","*://www.google.com/calendar/*","*://eu-west-1.console.aws.amazon.com/cloud9/*"]
let mapleader = ","
let locale = "jp"
let scrollstep = 100
"let scrollduration = 40

" qmarks
" google mail/task/calendar
let qmark G = ["http://yukimemi.github.io"]
let qmark T = ["https://translate.google.co.jp/?hl=ja"]
let qmark c = ["https://www.google.com/calendar"]
let qmark F = ["http://cloud.feedly.com/#latest"]
let qmark g = ["http://github.com/yukimemi"]
let qmark h = ["http://b.hatena.ne.jp"]
let qmark i = ["https://www.instagram.com/?hl=ja"]
let qmark l = ["http://www.google.com/language_tools"]
let qmark m = ["https://mail.google.com"]
let qmark n = ["https://yukimemi.netlify.com"]
let qmark p = ["http://getpocket.com/a/queue/"]
let qmark t = ["https://mail.google.com/tasks/canvas"]
let qmark A = ["https://www.google.com/analytics/web/?hl=ja&pli=1#report/visitors-overview/a47356782w84696412p87788910/"]
let qmark f = ["https://www.facebook.com/"]
let qmark q = ["https://qiita.com/"]

" mappings
map <C-[> <ESC>
map <C-b> scrollFullPageUp
map <C-f> scrollFullPageDown
map <C-u> scrollPageUp
map <C-d> scrollPageDown

" Navigation
map <C-h> previousTab
map <C-l> nextTab
map d closeTab
map u lastClosedTab
map gh firstTab
map gl lastTab
map R reloadTabUncached
map <C-g> :execute vyP<CR>

" next and previous pattern
let previousmatchpattern = "((?!last)(prev(ious)?|newer|back|«|less|<|‹|前|前のページ| )+)"
let nextmatchpattern = "((?!first)(next|older|more|>|›|»|forward|次|次のページ| )+)"

" searchengine
let searchengine duckduckgo = "https://duckduckgo.com/?q=%s"
let searchengine goo = "http://dictionary.goo.ne.jp/srch/all/%s/m0u/"
let searchengine ja = "https://translate.google.com/?hl=ja&tab=TT#auto/ja/%s"
let searchengine en = "https://translate.google.com/?hl=ja&tab=TT#auto/en/%s"
let searchengine refind2ch = "http://refind2ch.org/search?q=%s"
let searchengine amazon = "https://www.amazon.co.jp/s/?field-keywords=%s"
let searchengine chocolatey = "https://chocolatey.org/packages?q=%s"
let searchengine webstore = "https://chrome.google.com/webstore/search?q=%s"
let searchengine evernote = "https://www.evernote.com/Home.action#ses=1&sh=5&sds=3&x=%s&"
let searchengine portableapps = "http://portableapps.com/search/node/%s"
let searchengine qiita = "https://qiita.com/search?utf8=%E2%9C%93&sort=rel&q=%s&sort=rel"
let searchengine socialbearing = "http://www.socialbearing.com/search/general/=%s%20lang:ja"
let searchengine realtime = "http://realtime.search.yahoo.co.jp/search?ei=UTF-8&p=%s"
let searchengine wiki = "https://ja.wikipedia.org/wiki/%s"
" searchalias
let searchalias dd = "duckduckgo"
let searchalias ga = "goo"
let searchalias gj = "ja"
let searchalias ge = "en"
let searchalias 2 = "refind2ch"
let searchalias a = "amazon"
let searchalias c = "chocolatey"
let searchalias cw = "webstore"
let searchalias e = "evernote"
let searchalias pa = "portableapps"
let searchalias q = "qiita"
let searchalias s = "socialbearing"
let searchalias rt = "realtime"
let searchalias w = "wiki"

" Site-specific Configuration
site '*://twitter.com/*' {
  unmap j k ? o / . gu
}
site '*://tweetdeck.twitter.com/*' {
  unmap j k h l r t f n d p ? 0 1 2 3 4 5 6 7 8 9 x s
}

" Code blocks (see below for more info)
getIP() -> {{
httpRequest({url: 'http://api.ipify.org/?format=json', json: true},
  function(res) { Status.setMessage('IP: ' + res.ip); });
}}

" Displays your public IP address in the status bar
map ci :call getIP<CR>


